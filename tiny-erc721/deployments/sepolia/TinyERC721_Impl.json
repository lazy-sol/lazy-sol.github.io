{
  "address": "0x3c02b0E88B9a38eE494CF16AEb0E022A8072CeF3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialFeatures",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldVal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newVal",
          "type": "string"
        }
      ],
      "name": "BaseURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requested",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assigned",
          "type": "uint256"
        }
      ],
      "name": "RoleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "by",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "oldVal",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newVal",
          "type": "string"
        }
      ],
      "name": "TokenURIUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BATCH_SIZE_MULTIPLIER",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DOMAIN_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_BURNS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_OPERATOR_PERMITS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_OWN_BURNS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_PERMITS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_TRANSFERS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FEATURE_TRANSFERS_ON_BEHALF",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_FOR_ALL_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERMIT_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_ACCESS_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TOKEN_CREATOR",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_TOKEN_DESTROYER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_UPGRADE_MANAGER",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROLE_URI_MANAGER",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_approved",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "features",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInitializedVersion",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "getRole",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isFeatureEnabled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isOperatorInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "isSenderInRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "isTransferable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "mintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "multicall",
      "outputs": [
        {
          "internalType": "bytes[]",
          "name": "results",
          "type": "bytes[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_exp",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "permitForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "permitNonces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contractOwner",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_initialFeatures",
          "type": "uint256"
        }
      ],
      "name": "postConstruct",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeMint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "n",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeMintBatch",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_baseURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_tokenURI",
          "type": "string"
        }
      ],
      "name": "setTokenURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_mask",
          "type": "uint256"
        }
      ],
      "name": "updateFeatures",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc55eea0ae2b7ed8f1349929e0e36a6750c96d9cb9f7577c6321000733f52c36f",
  "receipt": {
    "to": null,
    "from": "0x5F185Da55f7BBD9217E3b3CeE06b180721FA6d34",
    "contractAddress": "0x3c02b0E88B9a38eE494CF16AEb0E022A8072CeF3",
    "transactionIndex": 48,
    "gasUsed": "3305045",
    "logsBloom": "0x
    "blockHash": "0x870a1ea1f406c9df9549cdb791a6cbd8405c7738d54ccaed89794907acfa6e0f",
    "transactionHash": "0xc55eea0ae2b7ed8f1349929e0e36a6750c96d9cb9f7577c6321000733f52c36f",
    "logs": [
      {
        "transactionIndex": 48,
        "blockNumber": 5666898,
        "transactionHash": "0xc55eea0ae2b7ed8f1349929e0e36a6750c96d9cb9f7577c6321000733f52c36f",
        "address": "0x3c02b0E88B9a38eE494CF16AEb0E022A8072CeF3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 79,
        "blockHash": "0x870a1ea1f406c9df9549cdb791a6cbd8405c7738d54ccaed89794907acfa6e0f"
      },
      {
        "transactionIndex": 48,
        "blockNumber": 5666898,
        "transactionHash": "0xc55eea0ae2b7ed8f1349929e0e36a6750c96d9cb9f7577c6321000733f52c36f",
        "address": "0x3c02b0E88B9a38eE494CF16AEb0E022A8072CeF3",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 80,
        "blockHash": "0x870a1ea1f406c9df9549cdb791a6cbd8405c7738d54ccaed89794907acfa6e0f"
      }
    ],
    "blockNumber": 5666898,
    "cumulativeGasUsed": "10601746",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0000000000000000000000000000000000000000",
    "implementation contract, not for use",
    "N/A",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "cd2c6b463d056161b2416efc6015212e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialFeatures\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldVal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newVal\",\"type\":\"string\"}],\"name\":\"BaseURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requested\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assigned\",\"type\":\"uint256\"}],\"name\":\"RoleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"by\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"oldVal\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newVal\",\"type\":\"string\"}],\"name\":\"TokenURIUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BATCH_SIZE_MULTIPLIER\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DOMAIN_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_BURNS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OPERATOR_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_OWN_BURNS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_PERMITS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FEATURE_TRANSFERS_ON_BEHALF\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_FOR_ALL_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_ACCESS_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_CREATOR\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_TOKEN_DESTROYER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_UPGRADE_MANAGER\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROLE_URI_MANAGER\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_approved\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"features\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInitializedVersion\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"getRole\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isFeatureEnabled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isOperatorInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"isSenderInRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"isTransferable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"mintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"multicall\",\"outputs\":[{\"internalType\":\"bytes[]\",\"name\":\"results\",\"type\":\"bytes[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_exp\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permitForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"permitNonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contractOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_initialFeatures\",\"type\":\"uint256\"}],\"name\":\"postConstruct\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"n\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeMintBatch\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_baseURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_tokenURI\",\"type\":\"string\"}],\"name\":\"setTokenURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_mask\",\"type\":\"uint256\"}],\"name\":\"updateFeatures\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Basil Gorin\",\"details\":\"ERC721: contract has passed adopted OpenZeppelin ERC721 tests        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/ERC721.behavior.js        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/extensions/ERC721URIStorage.test.jsA note on token URI: there are major differences on how token URI behaves comparing to OZ impl:      1. A token URI can be set for non-existing token for pre-allocation purposes,         still the URI will be deleted once token is burnt      2. If token URI is set, base URI has no affect on the token URI, the two are not concatenated,         base URI is used to construct the token URI only if the latter was not explicitly setSupports EIP-712 powered permits - permit() - approve() with signature.      Supports EIP-712 powered operator permits - permitForAll() - setApprovalForAll() with signature.EIP712 Domain:      name: TinyERC721v1      version: not in use, omitted (name already contains version)      chainId: EIP-155 chain id      verifyingContract: deployed contract address      salt: permitNonces[owner], where owner is an address which allows operation on their tokensPermit type:      owner: address      operator: address      tokenId: uint256      nonce: uint256      deadline: uint256Permit typeHash:        keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")PermitForAll type:      owner: address      operator: address      approved: bool      nonce: uint256      deadline: uint256PermitForAll typeHash:        keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")See https://eips.ethereum.org/EIPS/eip-712See usage examples in tests: erc721_permits.js\",\"events\":{\"BaseURIUpdated(address,string,string)\":{\"details\":\"Fired in setBaseURI()\",\"params\":{\"by\":\"an address which executed update\",\"newVal\":\"new _baseURI value\",\"oldVal\":\"old _baseURI value\"}},\"TokenURIUpdated(address,uint256,string,string)\":{\"details\":\"Fired in setTokenURI()\",\"params\":{\"by\":\"an address which executed update\",\"newVal\":\"new _baseURI value\",\"oldVal\":\"old _baseURI value\",\"tokenId\":\"token ID which URI was updated\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.\",\"params\":{\"_approved\":\"The new approved NFT controller\",\"_tokenId\":\"The NFT to approve\"}},\"balanceOf(address)\":{\"details\":\"NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.\",\"params\":{\"_owner\":\"An address for whom to query the balance\"},\"returns\":{\"_0\":\"The number of NFTs owned by `_owner`, possibly zero\"}},\"burn(uint256)\":{\"details\":\"Destroys the token with token ID specifiedRequires executor to have `ROLE_TOKEN_DESTROYER` permission      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabledCan be disabled by the contract creator forever by disabling      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking      its own roles to burn tokens and to enable burning features\",\"params\":{\"_tokenId\":\"ID of the token to burn\"}},\"constructor\":{\"details\":\"Constructs/deploys ERC721 instance with the name and symbol specified\",\"params\":{\"_contractOwner\":\"smart contract owner (has minting/burning and all other permissions)\",\"_initialFeatures\":\"RBAC features enabled initially\",\"_name\":\"name of the token to be accessible as `name()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract\",\"_symbol\":\"token symbol to be accessible as `symbol()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract\"}},\"exists(uint256)\":{\"details\":\"Returns whether the specified token ID has an ownership      information associated with it\",\"params\":{\"_tokenId\":\"ID of the token to query existence for\"},\"returns\":{\"_0\":\"whether the token exists (true - exists, false - doesn't exist)\"}},\"features()\":{\"details\":\"Effectively reads userRoles role for the contract itself\",\"returns\":{\"_0\":\"256-bit bitmask of the features enabled\"}},\"getApproved(uint256)\":{\"details\":\"Throws if `_tokenId` is not a valid NFT.\",\"params\":{\"_tokenId\":\"The NFT to find the approved address for\"},\"returns\":{\"_0\":\"The approved address for this NFT, or the zero address if there is none\"}},\"getInitializedVersion()\":{\"details\":\"Highest version that has been initialized.      Non-zero value means contract was already initialized.see {Initializable}, {reinitializer}.\",\"returns\":{\"_0\":\"highest version that has been initialized\"}},\"getRole(address)\":{\"details\":\"Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts\",\"params\":{\"operator\":\"address of a user to read permissions for,      or self address to read global features of the smart contract\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"_operator\":\"The address that acts on behalf of the owner\",\"_owner\":\"The address that owns the NFTs\"},\"returns\":{\"_0\":\"True if `_operator` is an approved operator for `_owner`, false otherwise\"}},\"isFeatureEnabled(uint256)\":{\"params\":{\"required\":\"set of features to check against\"},\"returns\":{\"_0\":\"true if all the features requested are enabled, false otherwise\"}},\"isOperatorInRole(address,uint256)\":{\"params\":{\"operator\":\"address of the user to check role for\",\"required\":\"set of permissions (role) to check\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isSenderInRole(uint256)\":{\"params\":{\"required\":\"set of permissions (role) to check against\"},\"returns\":{\"_0\":\"true if all the permissions requested are enabled, false otherwise\"}},\"isTransferable(uint256)\":{\"details\":\"Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);      The default behaviour is to always allow transfer if token existsImplementations may modify the default behaviour based on token metadata      if required\",\"params\":{\"_tokenId\":\"ID of the token to check if it's transferable\"},\"returns\":{\"_0\":\"true if token is transferable, false otherwise\"}},\"mint(address,uint256)\":{\"details\":\"Creates new token with token ID specified      and assigns an ownership `_to` for this tokenUnsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMint` instead of `mint`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\"}},\"mintBatch(address,uint256,uint256)\":{\"details\":\"Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Unsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMintBatch` instead of `mintBatch`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint tokens to\",\"_tokenId\":\"ID of the first token to mint\",\"n\":\"how many tokens to mint, sequentially increasing the _tokenId\"}},\"multicall(bytes[])\":{\"details\":\"Multicall support: a function to batch together multiple calls in a single external call.Receives and executes a batch of function calls on this contract.\",\"params\":{\"data\":\"an array of ABI-encoded function calls\"},\"returns\":{\"results\":\"an array of ABI-encoded results of the function calls\"}},\"ownerOf(uint256)\":{\"details\":\"NFTs assigned to zero address are considered invalid, and queries  about them do throw.\",\"params\":{\"_tokenId\":\"The identifier for an NFT\"},\"returns\":{\"_0\":\"The address of the owner of the NFT\"}},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Executes approve(_operator, _tokenId) on behalf of the token owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_tokenId` as the allowance of `_operator` over `_owner` token,      given `_owner` EIP-712 signed approvalEmits `Approval` event in the same way as `approve` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification\",\"params\":{\"_exp\":\"signature expiration time (unix timestamp)\",\"_operator\":\"new approved NFT controller\",\"_owner\":\"owner of the token to set approval on behalf of,      an address which signed the EIP-712 message\",\"_tokenId\":\"token ID to approve\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Executes setApprovalForAll(_operator, _approved) on behalf of the owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_operator` as the token operator for `_owner` tokens,      given `_owner` EIP-712 signed approvalEmits `ApprovalForAll` event in the same way as `setApprovalForAll` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification\",\"params\":{\"_approved\":\"true if the operator is approved, false to revoke approval\",\"_exp\":\"signature expiration time (unix timestamp)\",\"_operator\":\"an address to add to the set of authorized operators, i.e.      an address approved by the token owner to spend tokens on its behalf\",\"_owner\":\"owner of the tokens to set approval on behalf of,      an address which signed the EIP-712 message\",\"r\":\"half of the ECDSA signature pair\",\"s\":\"half of the ECDSA signature pair\",\"v\":\"the recovery byte of the signature\"}},\"postConstruct(address,string,string,uint256)\":{\"details\":\"\\\"Constructor replacement\\\" for a smart contract with a delayed initialization (post-deployment initialization)\",\"params\":{\"_contractOwner\":\"smart contract owner (has minting/burning and all other permissions)\",\"_initialFeatures\":\"RBAC features enabled initially\",\"_name\":\"name of the token to be accessible as `name()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract\",\"_symbol\":\"token symbol to be accessible as `symbol()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract\"}},\"safeMint(address,uint256)\":{\"details\":\"Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_data\":\"additional data with no specified format, sent in call to `_to`\",\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\"}},\"safeMintBatch(address,uint256,uint256)\":{\"details\":\"Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\",\"n\":\"how many tokens to mint, sequentially increasing the _tokenId\"}},\"safeMintBatch(address,uint256,uint256,bytes)\":{\"details\":\"Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission\",\"params\":{\"_data\":\"additional data with no specified format, sent in call to `_to`\",\"_to\":\"an address to mint token to\",\"_tokenId\":\"ID of the token to mint\",\"n\":\"how many tokens to mint, sequentially increasing the _tokenId\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"This works identically to the other function with an extra data parameter,  except this function just sets data to \\\"\\\".\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\",\"params\":{\"_data\":\"Additional data with no specified format, sent in call to `_to`\",\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.\",\"params\":{\"_approved\":\"True if the operator is approved, false to revoke approval\",\"_operator\":\"Address to add to the set of authorized operators\"}},\"setBaseURI(string)\":{\"details\":\"Restricted access function which updates base URI used to construct      ERC721Metadata.tokenURIRequires executor to have ROLE_URI_MANAGER permission\",\"params\":{\"_baseURI\":\"new base URI to set\"}},\"setTokenURI(uint256,string)\":{\"details\":\"Sets the token URI for the token defined by its ID\",\"params\":{\"_tokenId\":\"an ID of the token to set URI for\",\"_tokenURI\":\"token URI to set\"}},\"supportsInterface(bytes4)\":{\"details\":\"Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.\",\"params\":{\"interfaceID\":\"The interface identifier, as specified in ERC-165\"},\"returns\":{\"_0\":\"`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise\"}},\"tokenByIndex(uint256)\":{\"details\":\"Throws if `_index` >= `totalSupply()`.\",\"params\":{\"_index\":\"A counter less than `totalSupply()`\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT,  (sort order not specified)\"}},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.\",\"params\":{\"_index\":\"A counter less than `balanceOf(_owner)`\",\"_owner\":\"An address where we are interested in NFTs owned by them\"},\"returns\":{\"_0\":\"The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)\"}},\"tokenURI(uint256)\":{\"details\":\"Returns token URI if it was previously set with `setTokenURI`,      otherwise constructs it as base URI + token ID\"},\"totalSupply()\":{\"returns\":{\"_0\":\"A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.\",\"params\":{\"_from\":\"The current owner of the NFT\",\"_to\":\"The new owner\",\"_tokenId\":\"The NFT to transfer\"}},\"updateFeatures(uint256)\":{\"details\":\"Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions\",\"params\":{\"_mask\":\"bitmask representing a set of features to enable/disable\"}},\"updateRole(address,uint256)\":{\"details\":\"Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission\",\"params\":{\"operator\":\"address of a user to alter permissions for,       or self address to alter global features of the smart contract\",\"role\":\"bitmask representing a set of permissions to      enable/disable for a user specified\"}}},\"stateVariables\":{\"BATCH_SIZE_MULTIPLIER\":{\"details\":\"32 bit token ID space is optimal for batch minting in batches of size 8      8 * 32 = 256 - single storage slot in global/local collection(s)\"},\"DOMAIN_TYPEHASH\":{\"details\":\"Note: we do not include version into the domain typehash/separator,      it is implied version is concatenated to the name field, like \\\"TinyERC721v1\\\"\"},\"FEATURE_BURNS_ON_BEHALF\":{\"details\":\"Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for      `burn()` function to succeed when called by approved operator\"},\"FEATURE_OPERATOR_PERMITS\":{\"details\":\"Feature FEATURE_OPERATOR_PERMITS must be enabled in order for      `permitForAll()` function to succeed\"},\"FEATURE_OWN_BURNS\":{\"details\":\"Feature FEATURE_OWN_BURNS must be enabled in order for      `burn()` function to succeed when called by token owner\"},\"FEATURE_PERMITS\":{\"details\":\"Feature FEATURE_PERMITS must be enabled in order for      `permit()` function to succeed\"},\"FEATURE_TRANSFERS\":{\"details\":\"Feature FEATURE_TRANSFERS must be enabled in order for      `transferFrom()` function to succeed when executed by token owner\"},\"FEATURE_TRANSFERS_ON_BEHALF\":{\"details\":\"Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for      `transferFrom()` function to succeed whe executed by approved operatorToken owner must call `approve()` or `setApprovalForAll()`      first to authorize the transfer on behalf\"},\"ROLE_TOKEN_CREATOR\":{\"details\":\"Role ROLE_TOKEN_CREATOR allows minting tokens      (calling `mint` function)\"},\"ROLE_TOKEN_DESTROYER\":{\"details\":\"Role ROLE_TOKEN_DESTROYER allows burning tokens      (calling `burn` function)\"},\"ROLE_URI_MANAGER\":{\"details\":\"Role ROLE_URI_MANAGER allows updating the base URI      (executing `setBaseURI` function)\"},\"_tokenURIs\":{\"details\":\"Optional mapping for token URIs to be returned as is when `tokenURI()`      is called; if mapping doesn't exist for token, the URI is constructed      as `base URI + token ID`, where plus (+) denotes string concatenation\"},\"allTokens\":{\"details\":\"We call this collection \\\"Global\\\" token collectionArray with all Token IDs, used for enumerationTotal token supply `tokenSupply` is the length of this collection:      `totalSupply() = allTokens.length`\"},\"approvals\":{\"details\":\"`Maps Token ID => Approved Address`, where      Approved Address is an address allowed transfer ownership for the token      defined by Token ID\"},\"approvedOperators\":{\"details\":\"Maps `Token Owner Address => Operator Address => Approval State` - true/false (approved/not), where      - Token Owner Address is any address which may own tokens or not,      - Operator Address is any other address which may own tokens or not,      - Approval State is a flag indicating if Operator Address is allowed to        transfer tokens owned by Token Owner Address o their behalf\"},\"baseURI\":{\"details\":\"Base URI is used to construct ERC721Metadata.tokenURI as      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)For example, if base URI is https://api.com/token/, then token #1      will have an URI https://api.com/token/1If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`\"},\"collections\":{\"details\":\"We call these collections \\\"Local\\\" token collectionsMaps `Token Owner Address => Owned Token IDs Array`Token owner balance is the length of their token collection:      `balanceOf(owner) = collections[owner].length`\"},\"decimals\":{\"details\":\"ERC20 compliant token decimals is equal to zero since ERC721 token is non-fungible      and therefore non-divisible\"},\"permitNonces\":{\"details\":\"A record of nonces for signing/validating signatures in EIP-712 based      `permit` and `permitForAll` functionsEach time the nonce is used, it is increased by one, meaning reordering      of the EIP-712 transactions is not possibleInspired by EIP-2612 extension for ERC20 token standardMaps token owner address => token owner nonce\"},\"tokens\":{\"details\":\"Maps `Token ID => Token ID Global Index | Token ID Local Index | Token Owner Address`, where      - Token ID Global Index denotes Token ID index in the array of all the tokens,      - Token ID Local Index denotes Token ID index in the array of all the tokens owned by the owner,      - Token ID indexes are 32 bits long,      - `|` denotes bitwise concatenation of the valuesToken Owner Address for a given Token ID is lower 160 bits of the mapping value\"}},\"title\":\"Tiny ERC721, a.k.a 32bit NFT\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator      note: we specify contract version in its name\"},\"DOMAIN_TYPEHASH()\":{\"notice\":\"EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"FEATURE_BURNS_ON_BEHALF()\":{\"notice\":\"Enables approved operators to burn tokens on behalf of their owners\"},\"FEATURE_OPERATOR_PERMITS()\":{\"notice\":\"Enables operator approvals on behalf (permits for all via an EIP712 signature)\"},\"FEATURE_OWN_BURNS()\":{\"notice\":\"Enables token owners to burn their own tokens\"},\"FEATURE_PERMITS()\":{\"notice\":\"Enables approvals on behalf (permits via an EIP712 signature)\"},\"FEATURE_TRANSFERS()\":{\"notice\":\"Enables ERC721 transfers of the tokens      (transfer by the token owner himself)\"},\"FEATURE_TRANSFERS_ON_BEHALF()\":{\"notice\":\"Enables ERC721 transfers on behalf      (transfer by someone else on behalf of token owner)\"},\"PERMIT_FOR_ALL_TYPEHASH()\":{\"notice\":\"EIP-712 permitForAll (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"PERMIT_TYPEHASH()\":{\"notice\":\"EIP-712 permit (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\"},\"ROLE_ACCESS_MANAGER()\":{\"notice\":\"Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features\"},\"ROLE_TOKEN_CREATOR()\":{\"notice\":\"Token creator is responsible for creating (minting)      tokens to an arbitrary address\"},\"ROLE_TOKEN_DESTROYER()\":{\"notice\":\"Token destroyer is responsible for destroying (burning)      tokens owned by an arbitrary address\"},\"ROLE_UPGRADE_MANAGER()\":{\"notice\":\"Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\"},\"ROLE_URI_MANAGER()\":{\"notice\":\"URI manager is responsible for managing base URI      part of the token URI ERC721Metadata interface\"},\"approve(address,uint256)\":{\"notice\":\"Change or reaffirm the approved address for an NFT\"},\"balanceOf(address)\":{\"notice\":\"Count all NFTs assigned to an owner\"},\"decimals()\":{\"notice\":\"Current implementation includes a function `decimals` that returns uint8(0)      to be more compatible with ERC-20\"},\"exists(uint256)\":{\"notice\":\"Checks if specified token exists\"},\"features()\":{\"notice\":\"Retrieves globally set of features enabled\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved address for a single NFT\"},\"getRole(address)\":{\"notice\":\"Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Query if an address is an authorized operator for another address\"},\"isFeatureEnabled(uint256)\":{\"notice\":\"Checks if requested set of features is enabled globally on the contract\"},\"isOperatorInRole(address,uint256)\":{\"notice\":\"Checks if operator has all the permissions (role) required\"},\"isSenderInRole(uint256)\":{\"notice\":\"Checks if transaction sender `msg.sender` has all the permissions required\"},\"name()\":{\"notice\":\"ERC-20 compatible descriptive name for a collection of NFTs in this contract\"},\"ownerOf(uint256)\":{\"notice\":\"Find the owner of an NFT\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Change or reaffirm the approved address for an NFT on behalf\"},\"permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage      all of owner's assets - on behalf\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers the ownership of an NFT from one address to another address\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Enable or disable approval for a third party (\\\"operator\\\") to manage  all of `msg.sender`'s assets\"},\"supportsInterface(bytes4)\":{\"notice\":\"Query if a contract implements an interface\"},\"symbol()\":{\"notice\":\"ERC-20 compatible abbreviated name for a collection of NFTs in this contract\"},\"tokenByIndex(uint256)\":{\"notice\":\"Enumerate valid NFTs\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"notice\":\"Enumerate NFTs assigned to an owner\"},\"tokenURI(uint256)\":{\"notice\":\"A distinct Uniform Resource Identifier (URI) for a given asset.\"},\"totalSupply()\":{\"notice\":\"Count NFTs tracked by this contract\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST\"},\"updateFeatures(uint256)\":{\"notice\":\"Updates set of the globally enabled features (`features`),      taking into account sender's permissions\"},\"updateRole(address,uint256)\":{\"notice\":\"Updates set of permissions (role) for a given user,      taking into account sender's permissions.\"}},\"notice\":\"Tiny ERC721 defines an NFT with an integer (up to 32 bits) ID space.Rationale      Problem: ERC721 enumeration support requires some additional writes to the storage:      - when transferring a token in order to update the NFT collections of        the previous and next owners,      - when minting/burning a token in order to update global NFT collection      Solution: Reducing NFT ID space to 32 bits allows      - to eliminate the need to have and to write to two additional storage mappings        (also achievable with the 48 bits ID space)      - when batch minting, an optimization of writing 8 tokens at once into        global/local collections appliesThis smart contract can be used as is, but also can be inherited and used as a template.Fully ERC721-compatible with all optional interfaces implemented (metadata, enumeration),      see https://eips.ethereum.org/EIPS/eip-721\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/token/TinyERC721.sol\":\"TinyERC721\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@lazy-sol/access-control-upgradeable/contracts/InitializableAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @title Initializable Role-based Access Control (RBAC) // ERC1967Proxy\\n *\\n * @notice Access control smart contract provides an API to check\\n *      if a specific operation is permitted globally and/or\\n *      if a particular user has a permission to execute it.\\n *\\n * @notice This contract is inherited by other contracts requiring the role-based access control (RBAC)\\n *      protection for the restricted access functions\\n *\\n * @notice It deals with two main entities: features and roles.\\n *\\n * @notice Features are designed to be used to enable/disable public functions\\n *      of the smart contract (used by a wide audience).\\n * @notice User roles are designed to control the access to restricted functions\\n *      of the smart contract (used by a limited set of maintainers).\\n *\\n * @notice Terms \\\"role\\\", \\\"permissions\\\" and \\\"set of permissions\\\" have equal meaning\\n *      in the documentation text and may be used interchangeably.\\n * @notice Terms \\\"permission\\\", \\\"single permission\\\" implies only one permission bit set.\\n *\\n * @notice Access manager is a special role which allows to grant/revoke other roles.\\n *      Access managers can only grant/revoke permissions which they have themselves.\\n *      As an example, access manager with no other roles set can only grant/revoke its own\\n *      access manager permission and nothing else.\\n *\\n * @notice Access manager permission should be treated carefully, as a super admin permission:\\n *      Access manager with even no other permission can interfere with another account by\\n *      granting own access manager permission to it and effectively creating more powerful\\n *      permission set than its own.\\n *\\n * @dev Both current and OpenZeppelin AccessControl implementations feature a similar API\\n *      to check/know \\\"who is allowed to do this thing\\\".\\n * @dev Zeppelin implementation is more flexible:\\n *      - it allows setting unlimited number of roles, while current is limited to 256 different roles\\n *      - it allows setting an admin for each role, while current allows having only one global admin\\n * @dev Current implementation is more lightweight:\\n *      - it uses only 1 bit per role, while Zeppelin uses 256 bits\\n *      - it allows setting up to 256 roles at once, in a single transaction, while Zeppelin allows\\n *        setting only one role in a single transaction\\n *\\n * @dev This smart contract is designed to be inherited by other\\n *      smart contracts which require access control management capabilities.\\n *\\n * @dev Access manager permission has a bit 255 set.\\n *      This bit must not be used by inheriting contracts for any other permissions/features.\\n *\\n * @dev This is an initializable version of the RBAC, based on Zeppelin implementation,\\n *      it can be used for ERC1967 proxies, as well as for EIP-1167 minimal proxies\\n *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n *      see https://forum.openzeppelin.com/t/uups-proxies-tutorial-solidity-javascript/7786\\n *      see https://eips.ethereum.org/EIPS/eip-1167\\n *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#Clones\\n *\\n * @author Basil Gorin\\n */\\nabstract contract InitializableAccessControl is Initializable {\\n\\t/**\\n\\t * @dev Privileged addresses with defined roles/permissions\\n\\t * @dev In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Maps user address to the permissions bitmask (role), where each bit\\n\\t *      represents a permission\\n\\t * @dev Bitmask 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t *      represents all possible permissions\\n\\t * @dev 'This' address mapping represents global features of the smart contract\\n\\t *\\n\\t * @dev We keep the mapping private to prevent direct writes to it from the inheriting\\n\\t *      contracts, `getRole()` and `updateRole()` functions should be used instead\\n\\t */\\n\\tmapping(address => uint256) private userRoles;\\n\\n\\t/**\\n\\t * @dev Empty reserved space in storage. The size of the __gap array is calculated so that\\n\\t *      the amount of storage used by a contract always adds up to the 50.\\n\\t *      See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n\\t */\\n\\tuint256[49] private __gap;\\n\\n\\t/**\\n\\t * @notice Access manager is responsible for assigning the roles to users,\\n\\t *      enabling/disabling global features of the smart contract\\n\\t * @notice Access manager can add, remove and update user roles,\\n\\t *      remove and update global features\\n\\t *\\n\\t * @dev Role ROLE_ACCESS_MANAGER allows modifying user roles and global features\\n\\t * @dev Role ROLE_ACCESS_MANAGER has single bit at position 255 enabled\\n\\t */\\n\\tuint256 public constant ROLE_ACCESS_MANAGER = 0x8000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @notice Upgrade manager is responsible for smart contract upgrades,\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable\\n\\t *      see https://docs.openzeppelin.com/contracts/4.x/upgradeable\\n\\t *\\n\\t * @dev Role ROLE_UPGRADE_MANAGER allows passing the _authorizeUpgrade() check\\n\\t * @dev Role ROLE_UPGRADE_MANAGER has single bit at position 254 enabled\\n\\t */\\n\\tuint256 public constant ROLE_UPGRADE_MANAGER = 0x4000000000000000000000000000000000000000000000000000000000000000;\\n\\n\\t/**\\n\\t * @dev Bitmask representing all the possible permissions (super admin role)\\n\\t * @dev Has all the bits are enabled (2^256 - 1 value)\\n\\t */\\n\\tuint256 private constant FULL_PRIVILEGES_MASK = type(uint256).max; // before 0.8.0: uint256(-1) overflows to 0xFFFF...\\n\\n\\t/**\\n\\t * @dev Fired in updateRole() and updateFeatures()\\n\\t *\\n\\t * @param operator address which was granted/revoked permissions\\n\\t * @param requested permissions requested\\n\\t * @param assigned permissions effectively set\\n\\t */\\n\\tevent RoleUpdated(address indexed operator, uint256 requested, uint256 assigned);\\n\\n\\t/**\\n\\t * @notice Function modifier making a function defined as public behave as restricted\\n\\t *      (so that only a pre-configured set of accounts can execute it)\\n\\t *\\n\\t * @param role the role transaction executor is required to have;\\n\\t *      the function throws an \\\"access denied\\\" exception if this condition is not met\\n\\t */\\n\\tmodifier restrictedTo(uint256 role) {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(role), \\\"access denied\\\");\\n\\n\\t\\t// execute the rest of the function\\n\\t\\t_;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates/deploys the RBAC implementation to be used in a proxy\\n\\t *\\n\\t * @dev Note:\\n\\t *      the implementation is already initialized and\\n\\t *      `_postConstruct` is not executable on the implementation\\n\\t *      `_postConstruct` is still available in the context of a proxy\\n\\t *      and should be executed on the proxy deployment (in the same tx)\\n\\t */\\n\\tconstructor() initializer {}\\n\\n\\t/**\\n\\t * @dev Contract initializer, sets the contract owner to have full privileges\\n\\t *\\n\\t * @dev Can be executed only once, reverts when executed second time\\n\\t *\\n\\t * @dev IMPORTANT:\\n\\t *      this function SHOULD be executed during proxy deployment (in the same transaction)\\n\\t *\\n\\t * @param _owner smart contract owner having full privileges, can be zero\\n\\t * @param _features initial features mask of the contract, can be zero\\n\\t */\\n\\tfunction _postConstruct(address _owner, uint256 _features) internal virtual onlyInitializing {\\n\\t\\t// grant owner full privileges\\n\\t\\t__setRole(_owner, FULL_PRIVILEGES_MASK, FULL_PRIVILEGES_MASK);\\n\\t\\t// update initial features bitmask\\n\\t\\t__setRole(address(this), _features, _features);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Highest version that has been initialized.\\n\\t *      Non-zero value means contract was already initialized.\\n\\t * @dev see {Initializable}, {reinitializer}.\\n\\t *\\n\\t * @return highest version that has been initialized\\n\\t */\\n\\tfunction getInitializedVersion() public view returns(uint64) {\\n\\t\\t// delegate to `_getInitializedVersion`\\n\\t\\treturn _getInitializedVersion();\\n\\t}\\n\\n\\t/**\\n\\t * @notice Retrieves globally set of features enabled\\n\\t *\\n\\t * @dev Effectively reads userRoles role for the contract itself\\n\\t *\\n\\t * @return 256-bit bitmask of the features enabled\\n\\t */\\n\\tfunction features() public view returns (uint256) {\\n\\t\\t// features are stored in 'this' address mapping of `userRoles`\\n\\t\\treturn getRole(address(this));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of the globally enabled features (`features`),\\n\\t *      taking into account sender's permissions\\n\\t *\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t * @dev Function is left for backward compatibility with older versions\\n\\t *\\n\\t * @param _mask bitmask representing a set of features to enable/disable\\n\\t */\\n\\tfunction updateFeatures(uint256 _mask) public {\\n\\t\\t// delegate call to `updateRole`\\n\\t\\tupdateRole(address(this), _mask);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Reads the permissions (role) for a given user from the `userRoles` mapping\\n\\t *      (privileged addresses with defined roles/permissions)\\n\\t * @notice In the context of ERC20/ERC721 tokens these can be permissions to\\n\\t *      allow minting or burning tokens, transferring on behalf and so on\\n\\t *\\n\\t * @dev Having a simple getter instead of making the mapping public\\n\\t *      allows enforcing the encapsulation of the mapping and protects from\\n\\t *      writing to it directly in the inheriting smart contracts\\n\\t *\\n\\t * @param operator address of a user to read permissions for,\\n\\t *      or self address to read global features of the smart contract\\n\\t */\\n\\tfunction getRole(address operator) public view returns(uint256) {\\n\\t\\t// read the value from `userRoles` and return\\n\\t\\treturn userRoles[operator];\\n\\t}\\n\\n\\t/**\\n\\t * @notice Updates set of permissions (role) for a given user,\\n\\t *      taking into account sender's permissions.\\n\\t *\\n\\t * @dev Setting role to zero is equivalent to removing an all permissions\\n\\t * @dev Setting role to `FULL_PRIVILEGES_MASK` is equivalent to\\n\\t *      copying senders' permissions (role) to the user\\n\\t * @dev Requires transaction sender to have `ROLE_ACCESS_MANAGER` permission\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param role bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified\\n\\t */\\n\\tfunction updateRole(address operator, uint256 role) public {\\n\\t\\t// caller must have a permission to update user roles\\n\\t\\trequire(isSenderInRole(ROLE_ACCESS_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// evaluate the role and reassign it\\n\\t\\t__setRole(operator, role, _evaluateBy(msg.sender, getRole(operator), role));\\n\\t}\\n\\n\\t/**\\n\\t * @notice Determines the permission bitmask an operator can set on the\\n\\t *      target permission set\\n\\t * @notice Used to calculate the permission bitmask to be set when requested\\n\\t *     in `updateRole` and `updateFeatures` functions\\n\\t *\\n\\t * @dev Calculated based on:\\n\\t *      1) operator's own permission set read from userRoles[operator]\\n\\t *      2) target permission set - what is already set on the target\\n\\t *      3) desired permission set - what do we want set target to\\n\\t *\\n\\t * @dev Corner cases:\\n\\t *      1) Operator is super admin and its permission set is `FULL_PRIVILEGES_MASK`:\\n\\t *        `desired` bitset is returned regardless of the `target` permission set value\\n\\t *        (what operator sets is what they get)\\n\\t *      2) Operator with no permissions (zero bitset):\\n\\t *        `target` bitset is returned regardless of the `desired` value\\n\\t *        (operator has no authority and cannot modify anything)\\n\\t *\\n\\t * @dev Example:\\n\\t *      Consider an operator with the permissions bitmask     00001111\\n\\t *      is about to modify the target permission set          01010101\\n\\t *      Operator wants to set that permission set to          00110011\\n\\t *      Based on their role, an operator has the permissions\\n\\t *      to update only lowest 4 bits on the target, meaning that\\n\\t *      high 4 bits of the target set in this example is left\\n\\t *      unchanged and low 4 bits get changed as desired:      01010011\\n\\t *\\n\\t * @param operator address of the contract operator which is about to set the permissions\\n\\t * @param target input set of permissions to operator is going to modify\\n\\t * @param desired desired set of permissions operator would like to set\\n\\t * @return resulting set of permissions given operator will set\\n\\t */\\n\\tfunction _evaluateBy(address operator, uint256 target, uint256 desired) internal view returns (uint256) {\\n\\t\\t// read operator's permissions\\n\\t\\tuint256 p = getRole(operator);\\n\\n\\t\\t// taking into account operator's permissions,\\n\\t\\t// 1) enable the permissions desired on the `target`\\n\\t\\ttarget |= p & desired;\\n\\t\\t// 2) disable the permissions desired on the `target`\\n\\t\\ttarget &= FULL_PRIVILEGES_MASK ^ (p & (FULL_PRIVILEGES_MASK ^ desired));\\n\\n\\t\\t// return calculated result\\n\\t\\treturn target;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if requested set of features is enabled globally on the contract\\n\\t *\\n\\t * @param required set of features to check against\\n\\t * @return true if all the features requested are enabled, false otherwise\\n\\t */\\n\\tfunction isFeatureEnabled(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing `features` property\\n\\t\\treturn __hasRole(features(), required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if transaction sender `msg.sender` has all the permissions required\\n\\t *\\n\\t * @param required set of permissions (role) to check against\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isSenderInRole(uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `isOperatorInRole`, passing transaction sender\\n\\t\\treturn isOperatorInRole(msg.sender, required);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if operator has all the permissions (role) required\\n\\t *\\n\\t * @param operator address of the user to check role for\\n\\t * @param required set of permissions (role) to check\\n\\t * @return true if all the permissions requested are enabled, false otherwise\\n\\t */\\n\\tfunction isOperatorInRole(address operator, uint256 required) public view returns (bool) {\\n\\t\\t// delegate call to `__hasRole`, passing operator's permissions (role)\\n\\t\\treturn __hasRole(getRole(operator), required);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the `assignedRole` role to the operator, logs both `requestedRole` and `actualRole`\\n\\t *\\n\\t * @dev Unsafe:\\n\\t *      provides direct write access to `userRoles` mapping without any security checks,\\n\\t *      doesn't verify the executor (msg.sender) permissions,\\n\\t *      must be kept private at all times\\n\\t *\\n\\t * @param operator address of a user to alter permissions for,\\n\\t *       or self address to alter global features of the smart contract\\n\\t * @param requestedRole bitmask representing a set of permissions requested\\n\\t *      to be enabled/disabled for a user specified, used only to be logged into event\\n\\t * @param assignedRole bitmask representing a set of permissions to\\n\\t *      enable/disable for a user specified, used to update the mapping and to be logged into event\\n\\t */\\n\\tfunction __setRole(address operator, uint256 requestedRole, uint256 assignedRole) private {\\n\\t\\t// assign the role to the operator\\n\\t\\tuserRoles[operator] = assignedRole;\\n\\n\\t\\t// fire an event\\n\\t\\temit RoleUpdated(operator, requestedRole, assignedRole);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Checks if role `actual` contains all the permissions required `required`\\n\\t *\\n\\t * @param actual existent role\\n\\t * @param required required role\\n\\t * @return true if actual has required role (all permissions), false otherwise\\n\\t */\\n\\tfunction __hasRole(uint256 actual, uint256 required) private pure returns (bool) {\\n\\t\\t// check the bitmask for the role required and return the result\\n\\t\\treturn actual & required == required;\\n\\t}\\n}\\n\",\"keccak256\":\"0xdf3f05ee07ac2c2e79a925a714faed9c01c7db9757f95775d3b898c9782482e2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"contracts/interfaces/ERC165Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title ERC-165 Standard Interface Detection\\n *\\n * @dev Interface of the ERC165 standard, as defined in the\\n *       https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * @dev Implementers can declare support of contract interfaces,\\n *      which can then be queried by others.\\n *\\n * @author Christian Reitwie\\u00dfner, Nick Johnson, Fabian Vogelsteller, Jordi Baylina, Konrad Feldmeier, William Entriken\\n */\\ninterface ERC165 {\\n\\t/**\\n\\t * @notice Query if a contract implements an interface\\n\\t *\\n\\t * @dev Interface identification is specified in ERC-165.\\n\\t *      This function uses less than 30,000 gas.\\n\\t *\\n\\t * @param interfaceID The interface identifier, as specified in ERC-165\\n\\t * @return `true` if the contract implements `interfaceID` and\\n\\t *      `interfaceID` is not 0xffffffff, `false` otherwise\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceID) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x9b8e0a0ee2ddff1014108266f62a95dab3f76f08deba2e6177ec2ed251128f9d\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721Spec.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"./ERC165Spec.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev Solidity issue #3412: The ERC721 interfaces include explicit mutability guarantees for each function.\\n *      Mutability guarantees are, in order weak to strong: payable, implicit nonpayable, view, and pure.\\n *      Implementation MUST meet the mutability guarantee in this interface and MAY meet a stronger guarantee.\\n *      For example, a payable function in this interface may be implemented as nonpayable\\n *      (no state mutability specified) in implementing contract.\\n *      It is expected a later Solidity release will allow stricter contract to inherit from this interface,\\n *      but current workaround is that we edit this interface to add stricter mutability before inheriting:\\n *      we have removed all \\\"payable\\\" modifiers.\\n *\\n * @dev The ERC-165 identifier for this interface is 0x80ac58cd.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721 is ERC165 {\\n\\t/// @dev This emits when ownership of any NFT changes by any mechanism.\\n\\t///  This event emits when NFTs are created (`from` == 0) and destroyed\\n\\t///  (`to` == 0). Exception: during contract creation, any number of NFTs\\n\\t///  may be created and assigned without emitting Transfer. At the time of\\n\\t///  any transfer, the approved address for that NFT (if any) is reset to none.\\n\\tevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n\\t/// @dev This emits when the approved address for an NFT is changed or\\n\\t///  reaffirmed. The zero address indicates there is no approved address.\\n\\t///  When a Transfer event emits, this also indicates that the approved\\n\\t///  address for that NFT (if any) is reset to none.\\n\\tevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n\\t/// @dev This emits when an operator is enabled or disabled for an owner.\\n\\t///  The operator can manage all NFTs of the owner.\\n\\tevent ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);\\n\\n\\t/// @notice Count all NFTs assigned to an owner\\n\\t/// @dev NFTs assigned to the zero address are considered invalid, and this\\n\\t///  function throws for queries about the zero address.\\n\\t/// @param _owner An address for whom to query the balance\\n\\t/// @return The number of NFTs owned by `_owner`, possibly zero\\n\\tfunction balanceOf(address _owner) external view returns (uint256);\\n\\n\\t/// @notice Find the owner of an NFT\\n\\t/// @dev NFTs assigned to zero address are considered invalid, and queries\\n\\t///  about them do throw.\\n\\t/// @param _tokenId The identifier for an NFT\\n\\t/// @return The address of the owner of the NFT\\n\\tfunction ownerOf(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT. When transfer is complete, this function\\n\\t///  checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t///  `onERC721Received` on `_to` and throws if the return value is not\\n\\t///  `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\t/// @param _data Additional data with no specified format, sent in call to `_to`\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes calldata _data) external /*payable*/;\\n\\n\\t/// @notice Transfers the ownership of an NFT from one address to another address\\n\\t/// @dev This works identically to the other function with an extra data parameter,\\n\\t///  except this function just sets data to \\\"\\\".\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE\\n\\t///  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE\\n\\t///  THEY MAY BE PERMANENTLY LOST\\n\\t/// @dev Throws unless `msg.sender` is the current owner, an authorized\\n\\t///  operator, or the approved address for this NFT. Throws if `_from` is\\n\\t///  not the current owner. Throws if `_to` is the zero address. Throws if\\n\\t///  `_tokenId` is not a valid NFT.\\n\\t/// @param _from The current owner of the NFT\\n\\t/// @param _to The new owner\\n\\t/// @param _tokenId The NFT to transfer\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Change or reaffirm the approved address for an NFT\\n\\t/// @dev The zero address indicates there is no approved address.\\n\\t///  Throws unless `msg.sender` is the current NFT owner, or an authorized\\n\\t///  operator of the current owner.\\n\\t/// @param _approved The new approved NFT controller\\n\\t/// @param _tokenId The NFT to approve\\n\\tfunction approve(address _approved, uint256 _tokenId) external /*payable*/;\\n\\n\\t/// @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t///  all of `msg.sender`'s assets\\n\\t/// @dev Emits the ApprovalForAll event. The contract MUST allow\\n\\t///  multiple operators per owner.\\n\\t/// @param _operator Address to add to the set of authorized operators\\n\\t/// @param _approved True if the operator is approved, false to revoke approval\\n\\tfunction setApprovalForAll(address _operator, bool _approved) external;\\n\\n\\t/// @notice Get the approved address for a single NFT\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT.\\n\\t/// @param _tokenId The NFT to find the approved address for\\n\\t/// @return The approved address for this NFT, or the zero address if there is none\\n\\tfunction getApproved(uint256 _tokenId) external view returns (address);\\n\\n\\t/// @notice Query if an address is an authorized operator for another address\\n\\t/// @param _owner The address that owns the NFTs\\n\\t/// @param _operator The address that acts on behalf of the owner\\n\\t/// @return True if `_operator` is an approved operator for `_owner`, false otherwise\\n\\tfunction isApprovedForAll(address _owner, address _operator) external view returns (bool);\\n}\\n\\n/// @dev Note: the ERC-165 identifier for this interface is 0x150b7a02.\\ninterface ERC721TokenReceiver {\\n\\t/// @notice Handle the receipt of an NFT\\n\\t/// @dev The ERC721 smart contract calls this function on the recipient\\n\\t///  after a `transfer`. This function MAY throw to revert and reject the\\n\\t///  transfer. Return of other than the magic value MUST result in the\\n\\t///  transaction being reverted.\\n\\t///  Note: the contract address is always the message sender.\\n\\t/// @param _operator The address which called `safeTransferFrom` function\\n\\t/// @param _from The address which previously owned the token\\n\\t/// @param _tokenId The NFT identifier which is being transferred\\n\\t/// @param _data Additional data with no specified format\\n\\t/// @return `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`\\n\\t///  unless throwing\\n\\tfunction onERC721Received(address _operator, address _from, uint256 _tokenId, bytes calldata _data) external returns(bytes4);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x5b5e139f.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Metadata is ERC721 {\\n\\t/// @notice A descriptive name for a collection of NFTs in this contract\\n\\tfunction name() external view returns (string memory _name);\\n\\n\\t/// @notice An abbreviated name for NFTs in this contract\\n\\tfunction symbol() external view returns (string memory _symbol);\\n\\n\\t/// @notice A distinct Uniform Resource Identifier (URI) for a given asset.\\n\\t/// @dev Throws if `_tokenId` is not a valid NFT. URIs are defined in RFC\\n\\t///  3986. The URI may point to a JSON file that conforms to the \\\"ERC721\\n\\t///  Metadata JSON Schema\\\".\\n\\tfunction tokenURI(uint256 _tokenId) external view returns (string memory);\\n}\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n *\\n * @notice See https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev The ERC-165 identifier for this interface is 0x780e9d63.\\n *\\n * @author William Entriken, Dieter Shirley, Jacob Evans, Nastassia Sachs\\n */\\ninterface ERC721Enumerable is ERC721 {\\n\\t/// @notice Count NFTs tracked by this contract\\n\\t/// @return A count of valid NFTs tracked by this contract, where each one of\\n\\t///  them has an assigned and queryable owner not equal to the zero address\\n\\tfunction totalSupply() external view returns (uint256);\\n\\n\\t/// @notice Enumerate valid NFTs\\n\\t/// @dev Throws if `_index` >= `totalSupply()`.\\n\\t/// @param _index A counter less than `totalSupply()`\\n\\t/// @return The token identifier for the `_index`th NFT,\\n\\t///  (sort order not specified)\\n\\tfunction tokenByIndex(uint256 _index) external view returns (uint256);\\n\\n\\t/// @notice Enumerate NFTs assigned to an owner\\n\\t/// @dev Throws if `_index` >= `balanceOf(_owner)` or if\\n\\t///  `_owner` is the zero address, representing invalid NFTs.\\n\\t/// @param _owner An address where we are interested in NFTs owned by them\\n\\t/// @param _index A counter less than `balanceOf(_owner)`\\n\\t/// @return The token identifier for the `_index`th NFT assigned to `_owner`,\\n\\t///   (sort order not specified)\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe8e3d5fdb67239f27799c3f1d2b5b4abb469c51e09dd48d4b12516d3e626cd3c\",\"license\":\"MIT\"},\"contracts/interfaces/ERC721SpecExt.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Mintable ERC721\\n *\\n * @notice Defines mint capabilities for ERC721 tokens.\\n *      This interface should be treated as a definition of what mintable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface MintableERC721 {\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) external view returns(bool);\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMint` instead of `mint`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `safeMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) external;\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) external;\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Should have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) external;\\n}\\n\\n/**\\n * @title Burnable ERC721\\n *\\n * @notice Defines burn capabilities for ERC721 tokens.\\n *      This interface should be treated as a definition of what burnable means for ERC721\\n *\\n * @author Basil Gorin\\n */\\ninterface BurnableERC721 {\\n\\t/**\\n\\t * @notice Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Should be accessible publicly by token owners.\\n\\t *      May have a restricted access handled by the implementation\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) external;\\n}\\n\\n/**\\n * @title With Base URI\\n *\\n * @notice A marker interface for the contracts having the baseURI() function\\n *      or public string variable named baseURI\\n *\\n * @author Basil Gorin\\n */\\ninterface WithBaseURI {\\n\\t/**\\n\\t * @dev Usually used in NFT implementations to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t */\\n\\tfunction baseURI() external view returns(string memory);\\n}\\n\",\"keccak256\":\"0x27dd5c6b8fe56dc6dc0cdb5c8e73fd903501d937c62b990a21492b78b3090fd2\",\"license\":\"MIT\"},\"contracts/lib/ArrayUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title Array Utils\\n *\\n * @notice Solidity doesn't always work with arrays in an optimal way.\\n *      This library collects functions helping to optimize gas usage\\n *      when working with arrays in Solidity.\\n *\\n * @dev One of the most important use cases for arrays is \\\"tight\\\" arrays -\\n *      arrays which store values significantly less than 256-bits numbers\\n *\\n * @author Basil Gorin\\n */\\nlibrary ArrayUtils {\\n\\t/**\\n\\t * @dev Pushes `n` 32-bits values sequentially into storage allocated array `data`\\n\\t *      starting from the 32-bits value `v0`\\n\\t *\\n\\t * @dev Optimizations comparing to non-assembly implementation:\\n\\t *      - reads+writes to array size slot only once (instead of `n` times)\\n\\t *      - reads from the array data slots only once (instead of `7n/8` times)\\n\\t *      - writes into array data slots `n/8` times (instead of `n` times)\\n\\t *\\n\\t * @dev Maximum gas saving estimate: ~3n sstore, or 15,000 * n\\n\\t *\\n\\t * @param data storage array pointer to an array of 32-bits elements\\n\\t * @param v0 first number to push into the array\\n\\t * @param n number of values to push, pushes [v0, ..., v0 + n - 1]\\n\\t */\\n\\tfunction push32(uint32[] storage data, uint32 v0, uint32 n) internal {\\n\\t\\t// we're going to write 32-bits values into 256-bits storage slots of the array\\n\\t\\t// each 256-slot can store up to 8 32-bits sub-blocks, it can also be partially empty\\n\\t\\tassembly {\\n\\t\\t\\t// for dynamic arrays their slot (array.slot) contains the array length\\n\\t\\t\\t// array data is stored separately in consequent storage slots starting\\n\\t\\t\\t// from the slot with the address keccak256(array.slot)\\n\\n\\t\\t\\t// read the array length into `len` and increase it by `n`\\n\\t\\t\\tlet len := sload(data.slot)\\n\\t\\t\\tsstore(data.slot, add(len, n))\\n\\n\\t\\t\\t// find where to write elements and store this location into `loc`\\n\\t\\t\\t// load array storage slot number into memory onto position 0,\\n\\t\\t\\t// calculate the keccak256 of the slot number (first 32 bytes at position 0)\\n\\t\\t\\t// - this will point to the beginning of the array,\\n\\t\\t\\t// so we add array length divided by 8 to point to the last array slot\\n\\t\\t\\tmstore(0, data.slot)\\n\\t\\t\\tlet loc := add(keccak256(0, 32), div(len, 8))\\n\\n\\t\\t\\t// if we start writing data into already partially occupied slot (`len % 8 != 0`)\\n\\t\\t\\t// we need to modify the contents of that slot: read it and rewrite it\\n\\t\\t\\tlet offset := mod(len, 8)\\n\\t\\t\\tif not(iszero(offset)) {\\n\\t\\t\\t\\t// how many 32-bits sub-blocks left in the slot\\n\\t\\t\\t\\tlet left := sub(8, offset)\\n\\t\\t\\t\\t// update the `left` value not to exceed `n`\\n\\t\\t\\t\\tif gt(left, n) { left := n }\\n\\t\\t\\t\\t// load the contents of the first slot (partially occupied)\\n\\t\\t\\t\\tlet v256 := sload(loc)\\n\\t\\t\\t\\t// write the slot in 32-bits sub-blocks\\n\\t\\t\\t\\tfor { let j := 0 } lt(j, left) { j := add(j, 1) } {\\n\\t\\t\\t\\t\\t// write sub-block `j` at offset: `(j + offset) * 32` bits, length: 32-bits\\n\\t\\t\\t\\t\\t// v256 |= (v0 + j) << (j + offset) * 32\\n\\t\\t\\t\\t\\tv256 := or(v256, shl(mul(add(j, offset), 32), add(v0, j)))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// write first slot back, it can be still partially occupied, it can also be full\\n\\t\\t\\t\\tsstore(loc, v256)\\n\\t\\t\\t\\t// update `loc`: move to the next slot\\n\\t\\t\\t\\tloc := add(loc, 1)\\n\\t\\t\\t\\t// update `v0`: increment by number of values pushed\\n\\t\\t\\t\\tv0 := add(v0, left)\\n\\t\\t\\t\\t// update `n`: decrement by number of values pushed\\n\\t\\t\\t\\tn := sub(n, left)\\n\\t\\t\\t}\\n\\n\\t\\t\\t// rest of the slots (if any) are empty and will be only written to\\n\\t\\t\\t// write the array in 256-bits (8x32) slots\\n\\t\\t\\t// `i` iterates [0, n) with the 256-bits step, which is 8 taken `n` is 32-bits long\\n\\t\\t\\tfor { let i := 0 } lt(i, n) { i := add(i, 8) } {\\n\\t\\t\\t\\t// how many 32-bits sub-blocks left in the slot\\n\\t\\t\\t\\tlet left := 8\\n\\t\\t\\t\\t// update the `left` value not to exceed `n`\\n\\t\\t\\t\\tif gt(left, n) { left := n }\\n\\t\\t\\t\\t// init the 256-bits slot value\\n\\t\\t\\t\\tlet v256 := 0\\n\\t\\t\\t\\t// write the slot in 32-bits sub-blocks\\n\\t\\t\\t\\tfor { let j := 0 } lt(j, left) { j := add(j, 1) } {\\n\\t\\t\\t\\t\\t// write sub-block `j` at offset: `j * 32` bits, length: 32-bits\\n\\t\\t\\t\\t\\t// v256 |= (v0 + i + j) << j * 32\\n\\t\\t\\t\\t\\tv256 := or(v256, shl(mul(j, 32), add(v0, add(i, j))))\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\t// write slot `i / 8`\\n\\t\\t\\t\\tsstore(add(loc, div(i, 8)), v256)\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\\n\",\"keccak256\":\"0x22a695746e6fb09f9265efb41aedfdf6667ffbca770f86599c35085f1eec87be\",\"license\":\"MIT\"},\"contracts/lib/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n *\\n * @dev Copy of the Zeppelin's library:\\n *      https://github.com/OpenZeppelin/openzeppelin-contracts/blob/b0cf6fbb7a70f31527f36579ad644e1cf12fdf4e/contracts/utils/cryptography/ECDSA.sol\\n */\\nlibrary ECDSA {\\n\\t/**\\n\\t * @dev Overload of {ECDSA-recover} that receives the `v`,\\n\\t * `r` and `s` signature fields separately.\\n\\t */\\n\\tfunction recover(\\n\\t\\tbytes32 hash,\\n\\t\\tuint8 v,\\n\\t\\tbytes32 r,\\n\\t\\tbytes32 s\\n\\t) internal pure returns (address) {\\n\\t\\t// EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n\\t\\t// unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n\\t\\t// the valid range for s in (281): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (282): v \\u2208 {27, 28}. Most\\n\\t\\t// signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n\\t\\t//\\n\\t\\t// If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n\\t\\t// with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n\\t\\t// vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n\\t\\t// these malleable signatures as well.\\n\\t\\trequire(\\n\\t\\t\\tuint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n\\t\\t\\t\\\"invalid signature 's' value\\\"\\n\\t\\t);\\n\\t\\trequire(v == 27 || v == 28, \\\"invalid signature 'v' value\\\");\\n\\n\\t\\t// If the signature is valid (and not malleable), return the signer address\\n\\t\\taddress signer = ecrecover(hash, v, r, s);\\n\\t\\trequire(signer != address(0), \\\"invalid signature\\\");\\n\\n\\t\\treturn signer;\\n\\t}\\n}\\n\",\"keccak256\":\"0x8f399ff4c913e4059a2327387eed19fb9f580c1f4fd595cd2ce42d5e1a3308a7\",\"license\":\"MIT\"},\"contracts/lib/StringUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title String Utils Library\\n *\\n * @dev Library for working with strings, primarily converting\\n *      between strings and integer types\\n *\\n * @author Basil Gorin\\n */\\nlibrary StringUtils {\\n\\t/**\\n\\t * @dev Converts a string to unsigned integer using the specified `base`\\n\\t * @dev Throws on invalid input\\n\\t *      (wrong characters for a given `base`)\\n\\t * @dev Throws if given `base` is not supported\\n\\t * @param a string to convert\\n\\t * @param base number base, one of 2, 8, 10, 16\\n\\t * @return i a number representing given string\\n\\t */\\n\\tfunction atoi(string memory a, uint8 base) internal pure returns (uint256 i) {\\n\\t\\t// check if the base is valid\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\n\\n\\t\\t// convert string into bytes for convenient iteration\\n\\t\\tbytes memory buf = bytes(a);\\n\\n\\t\\t// iterate over the string (bytes buffer)\\n\\t\\tfor(uint256 p = 0; p < buf.length; p++) {\\n\\t\\t\\t// extract the digit\\n\\t\\t\\tuint8 digit = uint8(buf[p]) - 0x30;\\n\\n\\t\\t\\t// if digit is greater then 10 - mind the gap\\n\\t\\t\\t// see `itoa` function for more details\\n\\t\\t\\tif(digit > 10) {\\n\\t\\t\\t\\t// remove the gap\\n\\t\\t\\t\\tdigit -= 7;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// check if digit meets the base\\n\\t\\t\\trequire(digit < base);\\n\\n\\t\\t\\t// move to the next digit slot\\n\\t\\t\\ti *= base;\\n\\n\\t\\t\\t// add digit to the result\\n\\t\\t\\ti += digit;\\n\\t\\t}\\n\\n\\t\\t// return the result\\n\\t\\treturn i;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Converts a integer to a string using the specified `base`\\n\\t * @dev Throws if given `base` is not supported\\n\\t * @param i integer to convert\\n\\t * @param base number base, one of 2, 8, 10, 16\\n\\t * @return a a string representing given integer\\n\\t */\\n\\tfunction itoa(uint256 i, uint8 base) internal pure returns (string memory a) {\\n\\t\\t// check if the base is valid\\n\\t\\trequire(base == 2 || base == 8 || base == 10 || base == 16);\\n\\n\\t\\t// for zero input the result is \\\"0\\\" string for any base\\n\\t\\tif(i == 0) {\\n\\t\\t\\treturn \\\"0\\\";\\n\\t\\t}\\n\\n\\t\\t// bytes buffer to put ASCII characters into\\n\\t\\tbytes memory buf = new bytes(256);\\n\\n\\t\\t// position within a buffer to be used in cycle\\n\\t\\tuint256 p = 0;\\n\\n\\t\\t// extract digits one by one in a cycle\\n\\t\\twhile(i > 0) {\\n\\t\\t\\t// extract current digit\\n\\t\\t\\tuint8 digit = uint8(i % base);\\n\\n\\t\\t\\t// convert it to an ASCII code\\n\\t\\t\\t// 0x20 is \\\" \\\"\\n\\t\\t\\t// 0x30-0x39 is \\\"0\\\"-\\\"9\\\"\\n\\t\\t\\t// 0x41-0x5A is \\\"A\\\"-\\\"Z\\\"\\n\\t\\t\\t// 0x61-0x7A is \\\"a\\\"-\\\"z\\\" (\\\"A\\\"-\\\"Z\\\" XOR \\\" \\\")\\n\\t\\t\\tuint8 ascii = digit + 0x30;\\n\\n\\t\\t\\t// if digit is greater then 10,\\n\\t\\t\\t// fix the 0x3A-0x40 gap of punctuation marks\\n\\t\\t\\t// (7 characters in ASCII table)\\n\\t\\t\\tif(digit >= 10) {\\n\\t\\t\\t\\t// jump through the gap\\n\\t\\t\\t\\tascii += 7;\\n\\t\\t\\t}\\n\\n\\t\\t\\t// write character into the buffer\\n\\t\\t\\tbuf[p++] = bytes1(ascii);\\n\\n\\t\\t\\t// move to the next digit\\n\\t\\t\\ti /= base;\\n\\t\\t}\\n\\n\\t\\t// `p` contains real length of the buffer now,\\n\\t\\t// allocate the resulting buffer of that size\\n\\t\\tbytes memory result = new bytes(p);\\n\\n\\t\\t// copy the buffer in the reversed order\\n\\t\\tfor(p = 0; p < result.length; p++) {\\n\\t\\t\\t// copy from the beginning of the original buffer\\n\\t\\t\\t// to the end of resulting smaller buffer\\n\\t\\t\\tresult[result.length - p - 1] = buf[p];\\n\\t\\t}\\n\\n\\t\\t// construct string and return\\n\\t\\treturn string(result);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Concatenates two strings `s1` and `s2`, for example, if\\n\\t *      `s1` == `foo` and `s2` == `bar`, the result `s` == `foobar`\\n\\t * @param s1 first string\\n\\t * @param s2 second string\\n\\t * @return s concatenation result s1 + s2\\n\\t */\\n\\tfunction concat(string memory s1, string memory s2) internal pure returns (string memory s) {\\n\\t\\t// an old way of string concatenation (Solidity 0.4) is commented out\\n/*\\n\\t\\t// convert s1 into buffer 1\\n\\t\\tbytes memory buf1 = bytes(s1);\\n\\t\\t// convert s2 into buffer 2\\n\\t\\tbytes memory buf2 = bytes(s2);\\n\\t\\t// create a buffer for concatenation result\\n\\t\\tbytes memory buf = new bytes(buf1.length + buf2.length);\\n\\n\\t\\t// copy buffer 1 into buffer\\n\\t\\tfor(uint256 i = 0; i < buf1.length; i++) {\\n\\t\\t\\tbuf[i] = buf1[i];\\n\\t\\t}\\n\\n\\t\\t// copy buffer 2 into buffer\\n\\t\\tfor(uint256 j = buf1.length; j < buf2.length; j++) {\\n\\t\\t\\tbuf[j] = buf2[j - buf1.length];\\n\\t\\t}\\n\\n\\t\\t// construct string and return\\n\\t\\treturn string(buf);\\n*/\\n\\n\\t\\t// simply use built in function\\n\\t\\treturn string(abi.encodePacked(s1, s2));\\n\\t}\\n}\\n\",\"keccak256\":\"0xccff09c987e4a405b0c53bd23e4be9fef258b42fe632c363373504facf18b263\",\"license\":\"MIT\"},\"contracts/token/TinyERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../interfaces/ERC721Spec.sol\\\";\\nimport \\\"../interfaces/ERC721SpecExt.sol\\\";\\nimport \\\"../lib/ArrayUtils.sol\\\";\\nimport \\\"../lib/StringUtils.sol\\\";\\nimport \\\"../lib/ECDSA.sol\\\";\\n\\nimport \\\"@lazy-sol/access-control-upgradeable/contracts/InitializableAccessControl.sol\\\";\\n\\n/**\\n * @title Tiny ERC721, a.k.a 32bit NFT\\n *\\n * @notice Tiny ERC721 defines an NFT with an integer (up to 32 bits) ID space.\\n *\\n * @notice Rationale\\n *      Problem: ERC721 enumeration support requires some additional writes to the storage:\\n *      - when transferring a token in order to update the NFT collections of\\n *        the previous and next owners,\\n *      - when minting/burning a token in order to update global NFT collection\\n *\\n *      Solution: Reducing NFT ID space to 32 bits allows\\n *      - to eliminate the need to have and to write to two additional storage mappings\\n *        (also achievable with the 48 bits ID space)\\n *      - when batch minting, an optimization of writing 8 tokens at once into\\n *        global/local collections applies\\n *\\n * @notice This smart contract can be used as is, but also can be inherited and used as a template.\\n *\\n * @notice Fully ERC721-compatible with all optional interfaces implemented (metadata, enumeration),\\n *      see https://eips.ethereum.org/EIPS/eip-721\\n *\\n * @dev ERC721: contract has passed adopted OpenZeppelin ERC721 tests\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/ERC721.behavior.js\\n *        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/extensions/ERC721URIStorage.test.js\\n *\\n * @dev A note on token URI: there are major differences on how token URI behaves comparing to OZ impl:\\n *      1. A token URI can be set for non-existing token for pre-allocation purposes,\\n *         still the URI will be deleted once token is burnt\\n *      2. If token URI is set, base URI has no affect on the token URI, the two are not concatenated,\\n *         base URI is used to construct the token URI only if the latter was not explicitly set\\n *\\n * @dev Supports EIP-712 powered permits - permit() - approve() with signature.\\n *      Supports EIP-712 powered operator permits - permitForAll() - setApprovalForAll() with signature.\\n *\\n * @dev EIP712 Domain:\\n *      name: TinyERC721v1\\n *      version: not in use, omitted (name already contains version)\\n *      chainId: EIP-155 chain id\\n *      verifyingContract: deployed contract address\\n *      salt: permitNonces[owner], where owner is an address which allows operation on their tokens\\n *\\n * @dev Permit type:\\n *      owner: address\\n *      operator: address\\n *      tokenId: uint256\\n *      nonce: uint256\\n *      deadline: uint256\\n *\\n * @dev Permit typeHash:\\n *        keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")\\n *\\n * @dev PermitForAll type:\\n *      owner: address\\n *      operator: address\\n *      approved: bool\\n *      nonce: uint256\\n *      deadline: uint256\\n *\\n * @dev PermitForAll typeHash:\\n *        keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")\\n *\\n * @dev See https://eips.ethereum.org/EIPS/eip-712\\n * @dev See usage examples in tests: erc721_permits.js\\n *\\n * @author Basil Gorin\\n */\\ncontract TinyERC721 is ERC721Enumerable, ERC721Metadata, WithBaseURI, MintableERC721, BurnableERC721, InitializableAccessControl {\\n\\t// enable push32 optimization for uint32[]\\n\\tusing ArrayUtils for uint32[];\\n\\n\\t/**\\n\\t * @notice ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t *\\n\\t * @inheritdoc ERC721Metadata\\n\\t */\\n\\tstring public override name;\\n\\n\\t/**\\n\\t * @notice ERC-20 compatible abbreviated name for a collection of NFTs in this contract\\n\\t *\\n\\t * @inheritdoc ERC721Metadata\\n\\t */\\n\\tstring public override symbol;\\n\\n\\t/**\\n\\t * @notice Current implementation includes a function `decimals` that returns uint8(0)\\n\\t *      to be more compatible with ERC-20\\n\\t *\\n\\t * @dev ERC20 compliant token decimals is equal to zero since ERC721 token is non-fungible\\n\\t *      and therefore non-divisible\\n\\t */\\n\\tuint8 public constant decimals = 0;\\n\\n\\t/**\\n\\t * @notice Ownership information for all the tokens in existence\\n\\t *\\n\\t * @dev Maps `Token ID => Token ID Global Index | Token ID Local Index | Token Owner Address`, where\\n\\t *      - Token ID Global Index denotes Token ID index in the array of all the tokens,\\n\\t *      - Token ID Local Index denotes Token ID index in the array of all the tokens owned by the owner,\\n\\t *      - Token ID indexes are 32 bits long,\\n\\t *      - `|` denotes bitwise concatenation of the values\\n\\t * @dev Token Owner Address for a given Token ID is lower 160 bits of the mapping value\\n\\t */\\n\\tmapping(uint256 => uint256) internal tokens;\\n\\n\\t/**\\n\\t * @notice Enumerated collections of the tokens owned by particular owners\\n\\t *\\n\\t * @dev We call these collections \\\"Local\\\" token collections\\n\\t *\\n\\t * @dev Maps `Token Owner Address => Owned Token IDs Array`\\n\\t *\\n\\t * @dev Token owner balance is the length of their token collection:\\n\\t *      `balanceOf(owner) = collections[owner].length`\\n\\t */\\n\\tmapping(address => uint32[]) internal collections;\\n\\n\\t/**\\n\\t * @notice An array of all the tokens in existence\\n\\t *\\n\\t * @dev We call this collection \\\"Global\\\" token collection\\n\\t *\\n\\t * @dev Array with all Token IDs, used for enumeration\\n\\t *\\n\\t * @dev Total token supply `tokenSupply` is the length of this collection:\\n\\t *      `totalSupply() = allTokens.length`\\n\\t */\\n\\tuint32[] internal allTokens;\\n\\n\\t/**\\n\\t * @notice Addresses approved by token owners to transfer their tokens\\n\\t *\\n\\t * @dev `Maps Token ID => Approved Address`, where\\n\\t *      Approved Address is an address allowed transfer ownership for the token\\n\\t *      defined by Token ID\\n\\t */\\n\\tmapping(uint256 => address) internal approvals;\\n\\n\\t/**\\n\\t * @notice Addresses approved by token owners to transfer all their tokens\\n\\t *\\n\\t * @dev Maps `Token Owner Address => Operator Address => Approval State` - true/false (approved/not), where\\n\\t *      - Token Owner Address is any address which may own tokens or not,\\n\\t *      - Operator Address is any other address which may own tokens or not,\\n\\t *      - Approval State is a flag indicating if Operator Address is allowed to\\n\\t *        transfer tokens owned by Token Owner Address o their behalf\\n\\t */\\n\\tmapping(address => mapping(address => bool)) internal approvedOperators;\\n\\n\\t/**\\n\\t * @dev A record of nonces for signing/validating signatures in EIP-712 based\\n\\t *      `permit` and `permitForAll` functions\\n\\t *\\n\\t * @dev Each time the nonce is used, it is increased by one, meaning reordering\\n\\t *      of the EIP-712 transactions is not possible\\n\\t *\\n\\t * @dev Inspired by EIP-2612 extension for ERC20 token standard\\n\\t *\\n\\t * @dev Maps token owner address => token owner nonce\\n\\t */\\n\\tmapping(address => uint256) public permitNonces;\\n\\n\\t/**\\n\\t * @dev Base URI is used to construct ERC721Metadata.tokenURI as\\n\\t *      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)\\n\\t *\\n\\t * @dev For example, if base URI is https://api.com/token/, then token #1\\n\\t *      will have an URI https://api.com/token/1\\n\\t *\\n\\t * @dev If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`\\n\\t */\\n\\tstring public override baseURI = \\\"\\\";\\n\\n\\t/**\\n\\t * @dev Optional mapping for token URIs to be returned as is when `tokenURI()`\\n\\t *      is called; if mapping doesn't exist for token, the URI is constructed\\n\\t *      as `base URI + token ID`, where plus (+) denotes string concatenation\\n\\t */\\n\\tmapping(uint256 => string) internal _tokenURIs;\\n\\n\\t/**\\n\\t * @dev 32 bit token ID space is optimal for batch minting in batches of size 8\\n\\t *      8 * 32 = 256 - single storage slot in global/local collection(s)\\n\\t */\\n\\tuint8 public constant BATCH_SIZE_MULTIPLIER = 8;\\n\\n\\t/**\\n\\t * @notice Enables ERC721 transfers of the tokens\\n\\t *      (transfer by the token owner himself)\\n\\t * @dev Feature FEATURE_TRANSFERS must be enabled in order for\\n\\t *      `transferFrom()` function to succeed when executed by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS = 0x0000_0001;\\n\\n\\t/**\\n\\t * @notice Enables ERC721 transfers on behalf\\n\\t *      (transfer by someone else on behalf of token owner)\\n\\t * @dev Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for\\n\\t *      `transferFrom()` function to succeed whe executed by approved operator\\n\\t * @dev Token owner must call `approve()` or `setApprovalForAll()`\\n\\t *      first to authorize the transfer on behalf\\n\\t */\\n\\tuint32 public constant FEATURE_TRANSFERS_ON_BEHALF = 0x0000_0002;\\n\\n\\t/**\\n\\t * @notice Enables token owners to burn their own tokens\\n\\t *\\n\\t * @dev Feature FEATURE_OWN_BURNS must be enabled in order for\\n\\t *      `burn()` function to succeed when called by token owner\\n\\t */\\n\\tuint32 public constant FEATURE_OWN_BURNS = 0x0000_0008;\\n\\n\\t/**\\n\\t * @notice Enables approved operators to burn tokens on behalf of their owners\\n\\t *\\n\\t * @dev Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for\\n\\t *      `burn()` function to succeed when called by approved operator\\n\\t */\\n\\tuint32 public constant FEATURE_BURNS_ON_BEHALF = 0x0000_0010;\\n\\n\\t/**\\n\\t * @notice Enables approvals on behalf (permits via an EIP712 signature)\\n\\t * @dev Feature FEATURE_PERMITS must be enabled in order for\\n\\t *      `permit()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_PERMITS = 0x0000_0200;\\n\\n\\t/**\\n\\t * @notice Enables operator approvals on behalf (permits for all via an EIP712 signature)\\n\\t * @dev Feature FEATURE_OPERATOR_PERMITS must be enabled in order for\\n\\t *      `permitForAll()` function to succeed\\n\\t */\\n\\tuint32 public constant FEATURE_OPERATOR_PERMITS = 0x0000_0400;\\n\\n\\t/**\\n\\t * @notice Token creator is responsible for creating (minting)\\n\\t *      tokens to an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_CREATOR allows minting tokens\\n\\t *      (calling `mint` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_CREATOR = 0x0001_0000;\\n\\n\\t/**\\n\\t * @notice Token destroyer is responsible for destroying (burning)\\n\\t *      tokens owned by an arbitrary address\\n\\t * @dev Role ROLE_TOKEN_DESTROYER allows burning tokens\\n\\t *      (calling `burn` function)\\n\\t */\\n\\tuint32 public constant ROLE_TOKEN_DESTROYER = 0x0002_0000;\\n\\n\\t/**\\n\\t * @notice URI manager is responsible for managing base URI\\n\\t *      part of the token URI ERC721Metadata interface\\n\\t *\\n\\t * @dev Role ROLE_URI_MANAGER allows updating the base URI\\n\\t *      (executing `setBaseURI` function)\\n\\t */\\n\\tuint32 public constant ROLE_URI_MANAGER = 0x0010_0000;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t *\\n\\t * @dev Note: we do not include version into the domain typehash/separator,\\n\\t *      it is implied version is concatenated to the name field, like \\\"TinyERC721v1\\\"\\n\\t */\\n\\t// keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\")\\n\\tbytes32 public constant DOMAIN_TYPEHASH = 0x8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866;\\n\\n\\t/**\\n\\t * @notice EIP-712 contract's domain separator,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t *      note: we specify contract version in its name\\n\\t */\\n\\tfunction DOMAIN_SEPARATOR() public view returns(bytes32) {\\n\\t\\t// build the EIP-712 contract domain separator, see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator\\n\\t\\t// note: we specify contract version in its name\\n\\t\\treturn keccak256(abi.encode(DOMAIN_TYPEHASH, keccak256(bytes(\\\"TinyERC721v1\\\")), block.chainid, address(this)));\\n\\t}\\n\\n\\t/**\\n\\t * @notice EIP-712 permit (EIP-2612) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\\\")\\n\\tbytes32 public constant PERMIT_TYPEHASH = 0xee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29;\\n\\n\\t/**\\n\\t * @notice EIP-712 permitForAll (EIP-2612) struct typeHash,\\n\\t *      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash\\n\\t */\\n\\t// keccak256(\\\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\\\")\\n\\tbytes32 public constant PERMIT_FOR_ALL_TYPEHASH = 0x47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee;\\n\\n\\t/**\\n\\t * @dev Fired in setBaseURI()\\n\\t *\\n\\t * @param by an address which executed update\\n\\t * @param oldVal old _baseURI value\\n\\t * @param newVal new _baseURI value\\n\\t */\\n\\tevent BaseURIUpdated(address indexed by, string oldVal, string newVal);\\n\\n\\t/**\\n\\t * @dev Fired in setTokenURI()\\n\\t *\\n\\t * @param by an address which executed update\\n\\t * @param tokenId token ID which URI was updated\\n\\t * @param oldVal old _baseURI value\\n\\t * @param newVal new _baseURI value\\n\\t */\\n\\tevent TokenURIUpdated(address indexed by, uint256 indexed tokenId, string oldVal, string newVal);\\n\\n\\t/**\\n\\t * @dev Constructs/deploys ERC721 instance with the name and symbol specified\\n\\t *\\n\\t * @param _contractOwner smart contract owner (has minting/burning and all other permissions)\\n\\t * @param _name name of the token to be accessible as `name()`,\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t * @param _symbol token symbol to be accessible as `symbol()`,\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t * @param _initialFeatures RBAC features enabled initially\\n\\t */\\n\\tconstructor(address _contractOwner, string memory _name, string memory _symbol, uint256 _initialFeatures) {\\n\\t\\t// delegate to the same `postConstruct` function which would be used\\n\\t\\t// by all the proxies to be deployed and to be pointing to this impl\\n\\t\\tpostConstruct(_contractOwner, _name, _symbol, _initialFeatures);\\n\\t}\\n\\n\\t/**\\n\\t * @dev \\\"Constructor replacement\\\" for a smart contract with a delayed initialization (post-deployment initialization)\\n\\t *\\n\\t * @param _contractOwner smart contract owner (has minting/burning and all other permissions)\\n\\t * @param _name name of the token to be accessible as `name()`,\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t * @param _symbol token symbol to be accessible as `symbol()`,\\n\\t *      ERC-20 compatible descriptive name for a collection of NFTs in this contract\\n\\t * @param _initialFeatures RBAC features enabled initially\\n\\t */\\n\\tfunction postConstruct(\\n\\t\\taddress _contractOwner,\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tuint256 _initialFeatures\\n\\t) public initializer {\\n\\t\\t// verify name and symbol are set\\n\\t\\trequire(bytes(_name).length > 0, \\\"token name is not set\\\");\\n\\t\\trequire(bytes(_symbol).length > 0, \\\"token symbol is not set\\\");\\n\\n\\t\\t// assign token name and symbol\\n\\t\\tname = _name;\\n\\t\\tsymbol = _symbol;\\n\\n\\t\\t// if initial contract owner is specified\\n\\t\\tif(_contractOwner != address(0) || _initialFeatures != 0) {\\n\\t\\t\\t// initialize the RBAC module\\n\\t\\t\\t_postConstruct(_contractOwner, _initialFeatures);\\n\\t\\t}\\n\\t}\\n\\n\\n\\t/**\\n\\t * @dev Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);\\n\\t *      The default behaviour is to always allow transfer if token exists\\n\\t *\\n\\t * @dev Implementations may modify the default behaviour based on token metadata\\n\\t *      if required\\n\\t *\\n\\t * @param _tokenId ID of the token to check if it's transferable\\n\\t * @return true if token is transferable, false otherwise\\n\\t */\\n\\tfunction isTransferable(uint256 _tokenId) public view virtual returns(bool) {\\n\\t\\t// validate token existence\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\n\\n\\t\\t// generic implementation returns true if token exists\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Checks if specified token exists\\n\\t *\\n\\t * @dev Returns whether the specified token ID has an ownership\\n\\t *      information associated with it\\n\\t *\\n\\t * @inheritdoc MintableERC721\\n\\t *\\n\\t * @param _tokenId ID of the token to query existence for\\n\\t * @return whether the token exists (true - exists, false - doesn't exist)\\n\\t */\\n\\tfunction exists(uint256 _tokenId) public override view returns(bool) {\\n\\t\\t// read ownership information and return a check if it's not zero (set)\\n\\t\\treturn tokens[_tokenId] != 0;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC165\\n\\t */\\n\\tfunction supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n\\t\\t// construct the interface support from required and optional ERC721 interfaces\\n\\t\\treturn interfaceId == type(ERC165).interfaceId\\n\\t\\t\\t|| interfaceId == type(ERC721).interfaceId\\n\\t\\t\\t|| interfaceId == type(ERC721Metadata).interfaceId\\n\\t\\t\\t|| interfaceId == type(ERC721Enumerable).interfaceId\\n\\t\\t\\t|| interfaceId == type(MintableERC721).interfaceId\\n\\t\\t\\t|| interfaceId == type(BurnableERC721).interfaceId;\\n\\t}\\n\\n\\t// ===== Start: ERC721 Metadata =====\\n\\n\\t/**\\n\\t * @dev Restricted access function which updates base URI used to construct\\n\\t *      ERC721Metadata.tokenURI\\n\\t *\\n\\t * @dev Requires executor to have ROLE_URI_MANAGER permission\\n\\t *\\n\\t * @param _baseURI new base URI to set\\n\\t */\\n\\tfunction setBaseURI(string memory _baseURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit BaseURIUpdated(msg.sender, baseURI, _baseURI);\\n\\n\\t\\t// and update base URI\\n\\t\\tbaseURI = _baseURI;\\n\\t}\\n\\n\\t/**\\n\\t * @dev Returns token URI if it was previously set with `setTokenURI`,\\n\\t *      otherwise constructs it as base URI + token ID\\n\\t *\\n\\t * @inheritdoc ERC721Metadata\\n\\t */\\n\\tfunction tokenURI(uint256 _tokenId) public view override returns (string memory) {\\n\\t\\t// verify token exists\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\n\\n\\t\\t// read the token URI for the token specified\\n\\t\\tstring memory _tokenURI = _tokenURIs[_tokenId];\\n\\n\\t\\t// if token URI is set\\n\\t\\tif(bytes(_tokenURI).length > 0) {\\n\\t\\t\\t// just return it\\n\\t\\t\\treturn _tokenURI;\\n\\t\\t}\\n\\n\\t\\t// if base URI is not set\\n\\t\\tif(bytes(baseURI).length == 0) {\\n\\t\\t\\t// return an empty string\\n\\t\\t\\treturn \\\"\\\";\\n\\t\\t}\\n\\n\\t\\t// otherwise concatenate base URI + token ID\\n\\t\\treturn StringUtils.concat(baseURI, StringUtils.itoa(_tokenId, 10));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Sets the token URI for the token defined by its ID\\n\\t *\\n\\t * @param _tokenId an ID of the token to set URI for\\n\\t * @param _tokenURI token URI to set\\n\\t */\\n\\tfunction setTokenURI(uint256 _tokenId, string memory _tokenURI) public virtual {\\n\\t\\t// verify the access permission\\n\\t\\trequire(isSenderInRole(ROLE_URI_MANAGER), \\\"access denied\\\");\\n\\n\\t\\t// we do not verify token existence: we want to be able to\\n\\t\\t// preallocate token URIs before tokens are actually minted\\n\\n\\t\\t// emit an event first - to log both old and new values\\n\\t\\temit TokenURIUpdated(msg.sender, _tokenId, _tokenURIs[_tokenId], _tokenURI);\\n\\n\\t\\t// and update token URI\\n\\t\\t_tokenURIs[_tokenId] = _tokenURI;\\n\\t}\\n\\n\\t// ===== End: ERC721 Metadata =====\\n\\n\\t// ===== Start: ERC721, ERC721Enumerable Getters (view functions) =====\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction balanceOf(address _owner) public view override returns (uint256) {\\n\\t\\t// check `_owner` address is set\\n\\t\\trequire(_owner != address(0), \\\"zero address\\\");\\n\\n\\t\\t// derive owner balance for the their owned tokens collection\\n\\t\\t// as the length of that collection\\n\\t\\treturn collections[_owner].length;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction ownerOf(uint256 _tokenId) public view override returns (address) {\\n\\t\\t// derive ownership information of the token from the ownership mapping\\n\\t\\t// by extracting lower 160 bits of the mapping value as an address\\n\\t\\taddress owner = address(uint160(tokens[_tokenId]));\\n\\n\\t\\t// verify owner/token exists\\n\\t\\trequire(owner != address(0), \\\"token doesn't exist\\\");\\n\\n\\t\\t// return owner address\\n\\t\\treturn owner;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Enumerable\\n\\t */\\n\\tfunction totalSupply() public view override returns (uint256) {\\n\\t\\t// derive total supply value from the array of all existing tokens\\n\\t\\t// as the length of this array\\n\\t\\treturn allTokens.length;\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Enumerable\\n\\t */\\n\\tfunction tokenByIndex(uint256 _index) public view override returns (uint256) {\\n\\t\\t// index out of bounds check\\n\\t\\trequire(_index < totalSupply(), \\\"index out of bounds\\\");\\n\\n\\t\\t// find the token ID requested and return\\n\\t\\treturn allTokens[_index];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721Enumerable\\n\\t */\\n\\tfunction tokenOfOwnerByIndex(address _owner, uint256 _index) public view override returns (uint256) {\\n\\t\\t// index out of bounds check\\n\\t\\trequire(_index < balanceOf(_owner), \\\"index out of bounds\\\");\\n\\n\\t\\t// find the token ID requested and return\\n\\t\\treturn collections[_owner][_index];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction getApproved(uint256 _tokenId) public view override returns (address) {\\n\\t\\t// verify token specified exists\\n\\t\\trequire(exists(_tokenId), \\\"token doesn't exist\\\");\\n\\n\\t\\t// read the approval value and return\\n\\t\\treturn approvals[_tokenId];\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction isApprovedForAll(address _owner, address _operator) public view override returns (bool) {\\n\\t\\t// read the approval state value and return\\n\\t\\treturn approvedOperators[_owner][_operator];\\n\\t}\\n\\n\\t// ===== End: ERC721, ERC721Enumerable Getters (view functions) =====\\n\\n\\t// ===== Start: ERC721 mutative functions (transfers, approvals) =====\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes memory _data) public override {\\n\\t\\t// delegate call to unsafe transfer on behalf `transferFrom()`\\n\\t\\ttransferFrom(_from, _to, _tokenId);\\n\\n\\t\\t// if receiver `_to` is a smart contract\\n\\t\\tif(_to.code.length > 0) {\\n\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\n\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _from, _tokenId, _data);\\n\\n\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\n\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction safeTransferFrom(address _from, address _to, uint256 _tokenId) public override {\\n\\t\\t// delegate call to overloaded `safeTransferFrom()`, set data to \\\"\\\"\\n\\t\\tsafeTransferFrom(_from, _to, _tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction transferFrom(address _from, address _to, uint256 _tokenId) public override {\\n\\t\\t// if `_from` is equal to sender, require transfers feature to be enabled\\n\\t\\t// otherwise require transfers on behalf feature to be enabled\\n\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_TRANSFERS)\\n\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_TRANSFERS_ON_BEHALF),\\n\\t\\t        _from == msg.sender? \\\"transfers are disabled\\\": \\\"transfers on behalf are disabled\\\");\\n\\n\\t\\t// validate destination address is set\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\n\\t\\t// validate token ownership, which also\\n\\t\\t// validates token existence under the hood\\n\\t\\trequire(_from == ownerOf(_tokenId), \\\"access denied\\\");\\n\\n\\t\\t// verify operator (transaction sender) is either token owner,\\n\\t\\t// or is approved by the token owner to transfer this particular token,\\n\\t\\t// or is approved by the token owner to transfer any of his tokens\\n\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\n\\n\\t\\t// transfer is not allowed for a locked token\\n\\t\\trequire(isTransferable(_tokenId), \\\"locked token\\\");\\n\\n\\t\\t// if required, move token ownership,\\n\\t\\t// update old and new owner's token collections accordingly:\\n\\t\\tif(_from != _to) {\\n\\t\\t\\t// remove token from old owner's collection (also clears approval)\\n\\t\\t\\t__removeLocal(_tokenId);\\n\\t\\t\\t// add token to the new owner's collection\\n\\t\\t\\t__addLocal(_tokenId, _to);\\n\\t\\t}\\n\\t\\t// even if no real changes are required, approval needs to be erased\\n\\t\\telse {\\n\\t\\t\\t// clear token approval (also emits an Approval event)\\n\\t\\t\\t__clearApproval(_from, _tokenId);\\n\\t\\t}\\n\\n\\t\\t// fire ERC721 transfer event\\n\\t\\temit Transfer(_from, _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction approve(address _approved, uint256 _tokenId) public override {\\n\\t\\t// make an internal approve - delegate to `__approve`\\n\\t\\t__approve(msg.sender, _approved, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transaction for `approve` - EIP-712 signed `permit`\\n\\t *\\n\\t * @dev Approves address called `_operator` to transfer token `_tokenId`\\n\\t *      on behalf of the `_owner`\\n\\t *\\n\\t * @dev Zero `_operator` address indicates there is no approved address,\\n\\t *      and effectively removes an approval for the token specified\\n\\t *\\n\\t * @dev `_owner` must own token `_tokenId` to grant the permission\\n\\t * @dev Throws if `_operator` is a self address (`_owner`),\\n\\t *      or if `_tokenId` doesn't exist\\n\\t *\\n\\t * @param _owner owner of the token `_tokenId` to set approval on behalf of\\n\\t * @param _operator an address approved by the token owner\\n\\t *      to spend token `_tokenId` on its behalf\\n\\t * @param _tokenId token ID operator `_approved` is allowed to\\n\\t *      transfer on behalf of the token owner\\n\\t */\\n\\tfunction __approve(address _owner, address _operator, uint256 _tokenId) private {\\n\\t\\t// get token owner address\\n\\t\\taddress owner = ownerOf(_tokenId);\\n\\n\\t\\t// approving owner address itself doesn't make sense and is not allowed\\n\\t\\trequire(_operator != owner, \\\"self approval\\\");\\n\\n\\t\\t// only token owner or/and approved operator can set the approval\\n\\t\\trequire(_owner == owner || isApprovedForAll(owner, _owner), \\\"access denied\\\");\\n\\n\\t\\t// update the approval\\n\\t\\tapprovals[_tokenId] = _operator;\\n\\n\\t\\t// emit an event\\n\\t\\temit Approval(owner, _operator, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @inheritdoc ERC721\\n\\t */\\n\\tfunction setApprovalForAll(address _operator, bool _approved) public override {\\n\\t\\t// make an internal approve - delegate to `__approveForAll`\\n\\t\\t__approveForAll(msg.sender, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Powers the meta transaction for `setApprovalForAll` - EIP-712 signed `permitForAll`\\n\\t *\\n\\t * @dev Approves address called `_operator` to transfer any tokens\\n\\t *      on behalf of the `_owner`\\n\\t *\\n\\t * @dev `_owner` must not necessarily own any tokens to grant the permission\\n\\t * @dev Throws if `_operator` is a self address (`_owner`)\\n\\t *\\n\\t * @param _owner owner of the tokens to set approval on behalf of\\n\\t * @param _operator an address to add to the set of authorized operators, i.e.\\n\\t *      an address approved by the token owner to spend tokens on its behalf\\n\\t * @param _approved true if the operator is approved, false to revoke approval\\n\\t */\\n\\tfunction __approveForAll(address _owner, address _operator, bool _approved) private {\\n\\t\\t// approving tx sender address itself doesn't make sense and is not allowed\\n\\t\\trequire(_operator != _owner, \\\"self approval\\\");\\n\\n\\t\\t// update the approval\\n\\t\\tapprovedOperators[_owner][_operator] = _approved;\\n\\n\\t\\t// emit an event\\n\\t\\temit ApprovalForAll(_owner, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Clears approval for a given token owned by a given owner,\\n\\t *      emits an Approval event\\n\\t *\\n\\t * @dev Unsafe: doesn't check the validity of inputs (must be kept private),\\n\\t *      assuming the check is done by the caller\\n\\t *      - token existence\\n\\t *      - token ownership\\n\\t *\\n\\t * @param _owner token owner to be logged into Approved event as is\\n\\t * @param _tokenId token ID to erase approval for and to log into Approved event as is\\n\\t */\\n\\tfunction __clearApproval(address _owner, uint256 _tokenId) internal {\\n\\t\\t// clear token approval\\n\\t\\tdelete approvals[_tokenId];\\n\\t\\t// emit an ERC721 Approval event:\\n\\t\\t// \\\"When a Transfer event emits, this also indicates that the approved\\n\\t\\t// address for that NFT (if any) is reset to none.\\\"\\n\\t\\temit Approval(_owner, address(0), _tokenId);\\n\\t}\\n\\n\\t// ===== End: ERC721 mutative functions (transfers, approvals) =====\\n\\n\\t// ===== Start: Meta-transactions Support =====\\n\\n\\t/**\\n\\t * @notice Change or reaffirm the approved address for an NFT on behalf\\n\\t *\\n\\t * @dev Executes approve(_operator, _tokenId) on behalf of the token owner\\n\\t *      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signer\\n\\t *\\n\\t * @dev Sets the `_tokenId` as the allowance of `_operator` over `_owner` token,\\n\\t *      given `_owner` EIP-712 signed approval\\n\\t *\\n\\t * @dev Emits `Approval` event in the same way as `approve` does\\n\\t *\\n\\t * @dev Requires:\\n\\t *     - `_operator` to be non-zero address\\n\\t *     - `_exp` to be a timestamp in the future\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\n\\t *        over the EIP712-formatted function arguments.\\n\\t *     - the signature to use `_owner` current nonce (see `permitNonces`).\\n\\t *\\n\\t * @dev For more information on the signature format, see the\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\n\\t *\\n\\t * @param _owner owner of the token to set approval on behalf of,\\n\\t *      an address which signed the EIP-712 message\\n\\t * @param _operator new approved NFT controller\\n\\t * @param _tokenId token ID to approve\\n\\t * @param _exp signature expiration time (unix timestamp)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction permit(address _owner, address _operator, uint256 _tokenId, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n\\t\\t// verify permits are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_PERMITS), \\\"permits are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 Permit message, and\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! ----------->>> \\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_TYPEHASH, _owner, _operator, _tokenId, permitNonces[_owner]++, _exp), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\n\\n\\t\\t// delegate call to `__approve` - execute the logic required\\n\\t\\t__approve(_owner, _operator, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @notice Enable or disable approval for a third party (\\\"operator\\\") to manage\\n\\t *      all of owner's assets - on behalf\\n\\t *\\n\\t * @dev Executes setApprovalForAll(_operator, _approved) on behalf of the owner\\n\\t *      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signer\\n\\t *\\n\\t * @dev Sets the `_operator` as the token operator for `_owner` tokens,\\n\\t *      given `_owner` EIP-712 signed approval\\n\\t *\\n\\t * @dev Emits `ApprovalForAll` event in the same way as `setApprovalForAll` does\\n\\t *\\n\\t * @dev Requires:\\n\\t *     - `_operator` to be non-zero address\\n\\t *     - `_exp` to be a timestamp in the future\\n\\t *     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`\\n\\t *        over the EIP712-formatted function arguments.\\n\\t *     - the signature to use `_owner` current nonce (see `permitNonces`).\\n\\t *\\n\\t * @dev For more information on the signature format, see the\\n\\t *      https://eips.ethereum.org/EIPS/eip-2612#specification\\n\\t *\\n\\t * @param _owner owner of the tokens to set approval on behalf of,\\n\\t *      an address which signed the EIP-712 message\\n\\t * @param _operator an address to add to the set of authorized operators, i.e.\\n\\t *      an address approved by the token owner to spend tokens on its behalf\\n\\t * @param _approved true if the operator is approved, false to revoke approval\\n\\t * @param _exp signature expiration time (unix timestamp)\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction permitForAll(address _owner, address _operator, bool _approved, uint256 _exp, uint8 v, bytes32 r, bytes32 s) public {\\n\\t\\t// verify permits are enabled\\n\\t\\trequire(isFeatureEnabled(FEATURE_OPERATOR_PERMITS), \\\"operator permits are disabled\\\");\\n\\n\\t\\t// derive signer of the EIP712 PermitForAll message, and\\n\\t\\t// update the nonce for that particular signer to avoid replay attack!!! --------------------->>> \\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\u2193\\n\\t\\taddress signer = __deriveSigner(abi.encode(PERMIT_FOR_ALL_TYPEHASH, _owner, _operator, _approved, permitNonces[_owner]++, _exp), v, r, s);\\n\\n\\t\\t// perform message integrity and security validations\\n\\t\\trequire(signer == _owner, \\\"invalid signature\\\");\\n\\t\\trequire(block.timestamp < _exp, \\\"signature expired\\\");\\n\\n\\t\\t// delegate call to `__approve` - execute the logic required\\n\\t\\t__approveForAll(_owner, _operator, _approved);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Auxiliary function to verify structured EIP712 message signature and derive its signer\\n\\t *\\n\\t * @param abiEncodedTypehash abi.encode of the message typehash together with all its parameters\\n\\t * @param v the recovery byte of the signature\\n\\t * @param r half of the ECDSA signature pair\\n\\t * @param s half of the ECDSA signature pair\\n\\t */\\n\\tfunction __deriveSigner(bytes memory abiEncodedTypehash, uint8 v, bytes32 r, bytes32 s) private view returns(address) {\\n\\t\\t// build the EIP-712 hashStruct of the message\\n\\t\\tbytes32 hashStruct = keccak256(abiEncodedTypehash);\\n\\n\\t\\t// calculate the EIP-712 digest \\\"\\\\x19\\\\x01\\\" \\u2016 domainSeparator \\u2016 hashStruct(message)\\n\\t\\tbytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), hashStruct));\\n\\n\\t\\t// recover the address which signed the message with v, r, s\\n\\t\\taddress signer = ECDSA.recover(digest, v, r, s);\\n\\n\\t\\t// according to EIP3009 spec, zero address must be rejected when using ecrecover\\n\\t\\t// this check already happened inside `ECDSA.recover`\\n\\n\\t\\t// return the signer address derived from the signature\\n\\t\\treturn signer;\\n\\t}\\n\\n\\t// ===== End: Meta-transactions Support =====\\n\\n\\t// ===== Start: mint/burn support =====\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId, bytes memory _data) public override {\\n\\t\\t// delegate to unsafe mint\\n\\t\\tmint(_to, _tokenId);\\n\\n\\t\\t// make it safe: execute `onERC721Received`\\n\\n\\t\\t// if receiver `_to` is a smart contract\\n\\t\\tif(_to.code.length > 0) {\\n\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\n\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, address(0), _tokenId, _data);\\n\\n\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\n\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction safeMint(address _to, uint256 _tokenId) public override {\\n\\t\\t// delegate to `safeMint` with empty data\\n\\t\\tsafeMint(_to, _tokenId, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t * @param _data additional data with no specified format, sent in call to `_to`\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n, bytes memory _data) public override {\\n\\t\\t// delegate to unsafe mint\\n\\t\\tmintBatch(_to, _tokenId, n);\\n\\n\\t\\t// make it safe: execute `onERC721Received`\\n\\n\\t\\t// if receiver `_to` is a smart contract\\n\\t\\tif(_to.code.length > 0) {\\n\\t\\t\\t// onERC721Received: for each token minted\\n\\t\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t\\t// check it supports ERC721 interface - execute onERC721Received()\\n\\t\\t\\t\\tbytes4 response = ERC721TokenReceiver(_to).onERC721Received(msg.sender, address(0), _tokenId + i, _data);\\n\\n\\t\\t\\t\\t// expected response is ERC721TokenReceiver(_to).onERC721Received.selector\\n\\t\\t\\t\\t// bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))\\n\\t\\t\\t\\trequire(response == ERC721TokenReceiver(_to).onERC721Received.selector, \\\"invalid onERC721Received response\\\");\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Checks if `_to` is a smart contract (code size > 0). If so, it calls\\n\\t *      `onERC721Received` on `_to` and throws if the return value is not\\n\\t *      `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction safeMintBatch(address _to, uint256 _tokenId, uint256 n) public override {\\n\\t\\t// delegate to `safeMint` with empty data\\n\\t\\tsafeMintBatch(_to, _tokenId, n, \\\"\\\");\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new token with token ID specified\\n\\t *      and assigns an ownership `_to` for this token\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMint` instead of `mint`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint token to\\n\\t * @param _tokenId ID of the token to mint\\n\\t */\\n\\tfunction mint(address _to, uint256 _tokenId) public override {\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs\\n\\n\\t\\t// verify destination address is set\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\t\\t// verify the token ID is \\\"tiny\\\" (32 bits long at most)\\n\\t\\trequire(uint32(_tokenId) == _tokenId, \\\"token ID overflow\\\");\\n\\n\\t\\t// verify token doesn't yet exist\\n\\t\\trequire(!exists(_tokenId), \\\"already minted\\\");\\n\\n\\t\\t// create token ownership record,\\n\\t\\t// add token to `allTokens` and new owner's collections\\n\\t\\t// add token to both local and global collections (enumerations)\\n\\t\\t__addToken(_tokenId, _to);\\n\\n\\t\\t// fire ERC721 transfer event\\n\\t\\temit Transfer(address(0), _to, _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Creates new tokens starting with token ID specified\\n\\t *      and assigns an ownership `_to` for these tokens\\n\\t *\\n\\t * @dev Token IDs to be minted: [_tokenId, _tokenId + n)\\n\\t *\\n\\t * @dev n must be greater or equal 2: `n > 1`\\n\\t *\\n\\t * @dev Unsafe: doesn't execute `onERC721Received` on the receiver.\\n\\t *      Prefer the use of `saveMintBatch` instead of `mintBatch`.\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_CREATOR` permission\\n\\t *\\n\\t * @param _to an address to mint tokens to\\n\\t * @param _tokenId ID of the first token to mint\\n\\t * @param n how many tokens to mint, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction mintBatch(address _to, uint256 _tokenId, uint256 n) public override {\\n\\t\\t// check if caller has sufficient permissions to mint tokens\\n\\t\\trequire(isSenderInRole(ROLE_TOKEN_CREATOR), \\\"access denied\\\");\\n\\n\\t\\t// verify the inputs\\n\\n\\t\\t// verify destination address is set\\n\\t\\trequire(_to != address(0), \\\"zero address\\\");\\n\\t\\t// verify n is set properly\\n\\t\\trequire(n > 1, \\\"n is too small\\\");\\n\\t\\t// verify the token ID is \\\"tiny\\\" (32 bits long at most)\\n\\t\\trequire(uint32(_tokenId) == _tokenId, \\\"token ID overflow\\\");\\n\\t\\trequire(uint32(_tokenId + n - 1) == _tokenId + n - 1, \\\"n-th token ID overflow\\\");\\n\\n\\t\\t// verification: for each token to be minted\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t// verify token doesn't yet exist\\n\\t\\t\\trequire(!exists(_tokenId + i), \\\"already minted\\\");\\n\\t\\t}\\n\\n\\t\\t// create token ownership records,\\n\\t\\t// add tokens to `allTokens` and new owner's collections\\n\\t\\t// add tokens to both local and global collections (enumerations)\\n\\t\\t__addTokens(_to, _tokenId, n);\\n\\n\\t\\t// events: for each token minted\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t// fire ERC721 transfer event\\n\\t\\t\\temit Transfer(address(0), _to, _tokenId + i);\\n\\t\\t}\\n\\t}\\n\\n\\t/**\\n\\t * @dev Destroys the token with token ID specified\\n\\t *\\n\\t * @dev Requires executor to have `ROLE_TOKEN_DESTROYER` permission\\n\\t *      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabled\\n\\t *\\n\\t * @dev Can be disabled by the contract creator forever by disabling\\n\\t *      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking\\n\\t *      its own roles to burn tokens and to enable burning features\\n\\t *\\n\\t * @param _tokenId ID of the token to burn\\n\\t */\\n\\tfunction burn(uint256 _tokenId) public override {\\n\\t\\t// read token owner data\\n\\t\\t// verifies token exists under the hood\\n\\t\\taddress _from = ownerOf(_tokenId);\\n\\n\\t\\t// check if caller has sufficient permissions to burn tokens\\n\\t\\t// and if not - check for possibility to burn own tokens or to burn on behalf\\n\\t\\tif(!isSenderInRole(ROLE_TOKEN_DESTROYER)) {\\n\\t\\t\\t// if `_from` is equal to sender, require own burns feature to be enabled\\n\\t\\t\\t// otherwise require burns on behalf feature to be enabled\\n\\t\\t\\trequire(_from == msg.sender && isFeatureEnabled(FEATURE_OWN_BURNS)\\n\\t\\t\\t     || _from != msg.sender && isFeatureEnabled(FEATURE_BURNS_ON_BEHALF),\\n\\t\\t\\t        _from == msg.sender? \\\"burns are disabled\\\": \\\"burns on behalf are disabled\\\");\\n\\n\\t\\t\\t// verify sender is either token owner, or approved by the token owner to burn tokens\\n\\t\\t\\trequire(_from == msg.sender || msg.sender == getApproved(_tokenId) || isApprovedForAll(_from, msg.sender), \\\"access denied\\\");\\n\\t\\t}\\n\\n\\t\\t// remove token ownership record (also clears approval),\\n\\t\\t// remove token from both local and global collections\\n\\t\\t__removeToken(_tokenId);\\n\\n\\t\\t// delete token URI mapping\\n\\t\\tdelete _tokenURIs[_tokenId];\\n\\n\\t\\t// fire ERC721 transfer event\\n\\t\\temit Transfer(_from, address(0), _tokenId);\\n\\t}\\n\\n\\t// ===== End: mint/burn support =====\\n\\n\\t/**\\n\\t * @dev Multicall support: a function to batch together multiple calls in a single external call.\\n\\t * @dev Receives and executes a batch of function calls on this contract.\\n\\t *\\n\\t * @param data an array of ABI-encoded function calls\\n\\t * @return results an array of ABI-encoded results of the function calls\\n\\t */\\n\\tfunction multicall(bytes[] calldata data) external virtual returns (bytes[] memory results) {\\n\\t\\t// the implementation is copied from OZ Multicall contract;\\n\\t\\t// Context-related stuff is dropped as it's not supported by this contract\\n\\t\\tresults = new bytes[](data.length);\\n\\t\\tfor (uint256 i = 0; i < data.length; i++) {\\n\\t\\t\\t(bool success, bytes memory returndata) = address(this).delegatecall(data[i]);\\n\\n\\t\\t\\t// fail on error; but we may need to extract the error from the call\\n\\t\\t\\tif(!success) {\\n\\t\\t\\t\\t// Look for revert reason and bubble it up if present\\n\\t\\t\\t\\tif (returndata.length > 0) {\\n\\t\\t\\t\\t\\t// The easiest way to bubble the revert reason is using memory via assembly\\n\\t\\t\\t\\t\\t/// @solidity memory-safe-assembly\\n\\t\\t\\t\\t\\tassembly {\\n\\t\\t\\t\\t\\t\\tlet returndata_size := mload(returndata)\\n\\t\\t\\t\\t\\t\\trevert(add(32, returndata), returndata_size)\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\telse {\\n\\t\\t\\t\\t\\trevert(\\\"delegatecall failed\\\");\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t// no need to check if we called a contact (we know that we did)\\n\\n\\t\\t\\tresults[i] = returndata;\\n\\t\\t}\\n\\t\\treturn results;\\n\\t}\\n\\n\\t// ----- Start: auxiliary internal/private functions -----\\n\\n\\t/**\\n\\t * @dev Adds token to the new owner's collection (local),\\n\\t *      used internally to transfer existing tokens, to mint new\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to add\\n\\t * @param _to new owner address to add token to\\n\\t */\\n\\tfunction __addLocal(uint256 _tokenId, address _to) internal virtual {\\n\\t\\t// get a reference to the collection where token goes to\\n\\t\\tuint32[] storage destination = collections[_to];\\n\\n\\t\\t// update local index and ownership, do not change global index\\n\\t\\ttokens[_tokenId] = tokens[_tokenId]\\n\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\n\\t\\t\\t& 0x00000000FFFFFFFF000000000000000000000000000000000000000000000000\\n\\t\\t\\t| uint192(destination.length) << 160 | uint160(_to);\\n\\n\\t\\t// push token into the local collection\\n\\t\\tdestination.push(uint32(_tokenId));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add token to both local and global collections (enumerations),\\n\\t *      used internally to mint new tokens\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to add\\n\\t * @param _to new owner address to add token to\\n\\t */\\n\\tfunction __addToken(uint256 _tokenId, address _to) internal virtual {\\n\\t\\t// get a reference to the collection where token goes to\\n\\t\\tuint32[] storage destination = collections[_to];\\n\\n\\t\\t// update token global and local indexes, ownership\\n\\t\\ttokens[_tokenId] = uint224(allTokens.length) << 192 | uint192(destination.length) << 160 | uint160(_to);\\n\\n\\t\\t// push token into the collection\\n\\t\\tdestination.push(uint32(_tokenId));\\n\\n\\t\\t// push it into the global `allTokens` collection (enumeration)\\n\\t\\tallTokens.push(uint32(_tokenId));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Add tokens to both local and global collections (enumerations),\\n\\t *      used internally to mint new tokens in batches\\n\\t *\\n\\t * @dev Token IDs to be added: [_tokenId, _tokenId + n)\\n\\t *      n is expected to be greater or equal 2, but this is not checked\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _to new owner address to add token to\\n\\t * @param _tokenId first token ID to add\\n\\t * @param n how many tokens to add, sequentially increasing the _tokenId\\n\\t */\\n\\tfunction __addTokens(address _to, uint256 _tokenId, uint256 n) internal virtual {\\n\\t\\t// get a reference to the collection where tokens go to\\n\\t\\tuint32[] storage destination = collections[_to];\\n\\n\\t\\t// for each token to be added\\n\\t\\tfor(uint256 i = 0; i < n; i++) {\\n\\t\\t\\t// update token global and local indexes, ownership\\n\\t\\t\\ttokens[_tokenId + i] = uint224(allTokens.length + i) << 192 | uint192(destination.length + i) << 160 | uint160(_to);\\n\\t\\t}\\n\\n\\t\\t// push tokens into the local collection\\n\\t\\tdestination.push32(uint32(_tokenId), uint32(n));\\n\\t\\t// push tokens into the global `allTokens` collection (enumeration)\\n\\t\\tallTokens.push32(uint32(_tokenId), uint32(n));\\n\\t}\\n\\n\\t/**\\n\\t * @dev Removes token from owner's local collection,\\n\\t *      used internally to transfer or burn existing tokens\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to remove\\n\\t */\\n\\tfunction __removeLocal(uint256 _tokenId) internal virtual {\\n\\t\\t// read token data, containing global and local indexes, owner address\\n\\t\\tuint256 token = tokens[_tokenId];\\n\\n\\t\\t// get a reference to the token's owner collection (local)\\n\\t\\tuint32[] storage source = collections[address(uint160(token))];\\n\\n\\t\\t// token index within the collection\\n\\t\\tuint32 i = uint32(token >> 160);\\n\\n\\t\\t// get an ID of the last token in the collection\\n\\t\\tuint32 sourceId = source[source.length - 1];\\n\\n\\t\\t// if the token we're to remove from the collection is not the last one,\\n\\t\\t// we need to move last token in the collection into index `i`\\n\\t\\tif(i != source.length - 1) {\\n\\t\\t\\t// we put the last token in the collection to the position released\\n\\n\\t\\t\\t// update last token local index to point to proper place in the collection\\n\\t\\t\\t// preserve global index and ownership info\\n\\t\\t\\ttokens[sourceId] = tokens[sourceId]\\n\\t\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\n\\t\\t\\t\\t& 0x00000000FFFFFFFF00000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t| uint192(i) << 160;\\n\\n\\t\\t\\t// put it into the position `i` within the collection\\n\\t\\t\\tsource[i] = sourceId;\\n\\t\\t}\\n\\n\\t\\t// trim the collection by removing last element\\n\\t\\tsource.pop();\\n\\n\\t\\t// clear token approval (also emits an Approval event)\\n\\t\\t__clearApproval(address(uint160(token)), _tokenId);\\n\\t}\\n\\n\\t/**\\n\\t * @dev Removes token from both local and global collections (enumerations),\\n\\t *      used internally to burn existing tokens\\n\\t *\\n\\t * @dev Unsafe: doesn't check for data structures consistency\\n\\t *      (token existence, token ownership, etc.)\\n\\t *\\n\\t * @dev Must be kept private at all times. Inheriting smart contracts\\n\\t *      may be interested in overriding this function.\\n\\t *\\n\\t * @param _tokenId token ID to remove\\n\\t */\\n\\tfunction __removeToken(uint256 _tokenId) internal virtual {\\n\\t\\t// remove token from owner's (local) collection first\\n\\t\\t__removeLocal(_tokenId);\\n\\n\\t\\t// token index within the global collection\\n\\t\\tuint32 i = uint32(tokens[_tokenId] >> 192);\\n\\n\\t\\t// delete the token\\n\\t\\tdelete tokens[_tokenId];\\n\\n\\t\\t// get an ID of the last token in the collection\\n\\t\\tuint32 lastId = allTokens[allTokens.length - 1];\\n\\n\\t\\t// if the token we're to remove from the collection is not the last one,\\n\\t\\t// we need to move last token in the collection into index `i`\\n\\t\\tif(i != allTokens.length - 1) {\\n\\t\\t\\t// we put the last token in the collection to the position released\\n\\n\\t\\t\\t// update last token global index to point to proper place in the collection\\n\\t\\t\\t// preserve local index and ownership info\\n\\t\\t\\ttokens[lastId] = tokens[lastId]\\n\\t\\t\\t\\t//  |unused |global | local | ownership information (address)      |\\n\\t\\t\\t\\t& 0x0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n\\t\\t\\t\\t| uint224(i) << 192;\\n\\n\\t\\t\\t// put it into the position `i` within the collection\\n\\t\\t\\tallTokens[i] = lastId;\\n\\t\\t}\\n\\n\\t\\t// trim the collection by removing last element\\n\\t\\tallTokens.pop();\\n\\t}\\n\\n\\t// ----- End: auxiliary internal/private functions -----\\n}\\n\",\"keccak256\":\"0xb51e826cba7f5c1f62432cef31ee454ecaa51bdc2cef9f03c8011c98c7614229\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040819052600060808190526200001b91603b916200045f565b503480156200002957600080fd5b5060405162003f0b38038062003f0b8339810160408190526200004c91620005b8565b600054610100900460ff16158080156200006d5750600054600160ff909116105b806200009d57506200008a306200016860201b620021e21760201c565b1580156200009d575060005460ff166001145b620000f55760405162461bcd60e51b815260206004820152602e602482015260008051602062003ecb83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff19166001179055801562000119576000805461ff0019166101001790555b80156200014f576000805461ff00191690556040516001815260008051602062003eeb8339815191529060200160405180910390a15b506200015e8484848462000177565b5050505062000699565b6001600160a01b03163b151590565b600054610100900460ff1615808015620001985750600054600160ff909116105b80620001c85750620001b5306200016860201b620021e21760201c565b158015620001c8575060005460ff166001145b6200021c5760405162461bcd60e51b815260206004820152602e602482015260008051602062003ecb83398151915260448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401620000ec565b6000805460ff19166001179055801562000240576000805461ff0019166101001790555b6000845111620002935760405162461bcd60e51b815260206004820152601560248201527f746f6b656e206e616d65206973206e6f742073657400000000000000000000006044820152606401620000ec565b6000835111620002e65760405162461bcd60e51b815260206004820152601760248201527f746f6b656e2073796d626f6c206973206e6f74207365740000000000000000006044820152606401620000ec565b8351620002fb9060339060208701906200045f565b508251620003119060349060208601906200045f565b506001600160a01b0385161515806200032957508115155b156200033b576200033b858362000378565b801562000371576000805461ff00191690556040516001815260008051602062003eeb8339815191529060200160405180910390a15b5050505050565b600054610100900460ff16620003e55760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401620000ec565b620003f4826000198062000405565b6200040130828062000405565b5050565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b8280546200046d9062000646565b90600052602060002090601f016020900481019282620004915760008555620004dc565b82601f10620004ac57805160ff1916838001178555620004dc565b82800160010185558215620004dc579182015b82811115620004dc578251825591602001919060010190620004bf565b50620004ea929150620004ee565b5090565b5b80821115620004ea5760008155600101620004ef565b600082601f83011262000516578081fd5b81516001600160401b038082111562000533576200053362000683565b604051601f8301601f19908116603f011681019082821181831017156200055e576200055e62000683565b816040528381526020925086838588010111156200057a578485fd5b8491505b838210156200059d57858201830151818301840152908201906200057e565b83821115620005ae57848385830101525b9695505050505050565b60008060008060808587031215620005ce578384fd5b84516001600160a01b0381168114620005e5578485fd5b60208601519094506001600160401b038082111562000602578485fd5b620006108883890162000505565b9450604087015191508082111562000626578384fd5b50620006358782880162000505565b606096909601519497939650505050565b600181811c908216806200065b57607f821691505b602082108114156200067d57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052604160045260246000fd5b61382280620006a96000396000f3fe608060405234801561001057600080fd5b506004361061038e5760003560e01c80636c0360eb116101de578063ae60bda41161010f578063c688d693116100ad578063e62cac761161007c578063e62cac76146107dd578063e985e9c5146107e7578063f63c2f82146107fa578063fcc2c0781461080257600080fd5b8063c688d69314610791578063c87b56dd146107a4578063d505accf146107b7578063d5bb7f67146107ca57600080fd5b8063b2564569116100e9578063b25645691461074e578063b3c6501514610761578063b88d4fde14610776578063c0d6568d1461078957600080fd5b8063ae60bda414610725578063ae682e2e14610730578063af65e2a81461073b57600080fd5b80639032c7261161017c578063a144819411610156578063a1448194146106cc578063a22cb465146106df578063ac9650d8146106f2578063ae5b102e1461071257600080fd5b80639032c726146106a957806395d89b41146106bc57806398b622a2146106c457600080fd5b8063768bfc9a116101b8578063768bfc9a1461067b5780638832e6e3146106845780638d4e57e6146106975780638f6fba8c146106a157600080fd5b80636c0360eb1461064d57806370a0823114610655578063725f36261461066857600080fd5b80632f745c59116102c35780634427673311610261578063585956d611610230578063585956d6146105ed5780635a0ff57b1461061457806361587911146106275780636352211e1461063a57600080fd5b8063442767331461057c5780634f558e79146105a55780634f6ccce7146105c757806355f804b3146105da57600080fd5b80633644e5151161029d5780633644e5151461053b57806340c10f191461054357806342842e0e1461055657806342966c681461056957600080fd5b80632f745c59146104e757806330adf81f146104fa578063313ce5671461052157600080fd5b806318160ddd1161033057806320606b701161030a57806320606b701461048557806323b872dd146104ac5780632b521416146104bf5780632e81aaea146104d457600080fd5b806318160ddd1461044b578063191d0ffc1461045d5780631a0b04ea1461047d57600080fd5b8063095ea7b31161036c578063095ea7b3146103fb5780630dc5b4241461041057806314b7b4e11461042e578063162094c41461043857600080fd5b806301ffc9a71461039357806306fdde03146103bb578063081812fc146103d0575b600080fd5b6103a66103a13660046132a6565b610815565b60405190151581526020015b60405180910390f35b6103c36108b8565b6040516103b2919061347f565b6103e36103de366004613319565b610946565b6040516001600160a01b0390911681526020016103b2565b61040e61040936600461313f565b610996565b005b61041961020081565b60405163ffffffff90911681526020016103b2565b6104196210000081565b61040e610446366004613331565b6109a5565b6037545b6040519081526020016103b2565b61044f61046b366004612ef3565b603a6020526000908152604090205481565b610419600881565b61044f7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61040e6104ba366004612faf565b610a3c565b3060009081526001602052604090205461044f565b61040e6104e23660046131bd565b610cfd565b61044f6104f536600461313f565b610f12565b61044f7fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d2981565b610529600081565b60405160ff90911681526020016103b2565b61044f610fc5565b61040e61055136600461313f565b61105e565b61040e610564366004612faf565b611252565b61040e610577366004613319565b61126d565b61044f61058a366004612ef3565b6001600160a01b031660009081526001602052604090205490565b6103a66105b3366004613319565b600090815260356020526040902054151590565b61044f6105d5366004613319565b611407565b61040e6105e83660046132de565b6114a1565b61044f7f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee81565b61040e6106223660046130c6565b611520565b61040e6106353660046131bd565b611714565b6103e3610648366004613319565b61172f565b6103c3611764565b61044f610663366004612ef3565b611771565b6103a6610676366004613319565b6117b5565b61041961040081565b61040e610692366004613168565b6117d1565b6104196201000081565b610419600281565b61040e6106b7366004612f3f565b6118a4565b6103c3611a2c565b610529600881565b61040e6106da36600461313f565b611a39565b61040e6106ed36600461309d565b611a53565b610705610700366004613236565b611a5e565b6040516103b2919061341e565b61040e61072036600461313f565b611bec565b61044f600160fe1b81565b61044f600160ff1b81565b61040e6107493660046131ef565b611c71565b6103a661075c366004613319565b611d6b565b60005460405160ff90911681526020016103b2565b61040e610784366004612fea565b611d9e565b610419600181565b6103a661079f36600461313f565b611e72565b6103c36107b2366004613319565b611e9b565b61040e6107c5366004613050565b61203b565b61040e6107d8366004613319565b61219b565b6104196202000081565b6103a66107f5366004612f0d565b6121a8565b610419601081565b6103a6610810366004613319565b6121d6565b60006001600160e01b031982166301ffc9a760e01b148061084657506001600160e01b031982166380ac58cd60e01b145b8061086157506001600160e01b03198216635b5e139f60e01b145b8061087c57506001600160e01b0319821663780e9d6360e01b145b8061089757506001600160e01b03198216633197b5d160e21b145b806108b257506001600160e01b03198216630852cd8d60e31b145b92915050565b603380546108c59061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546108f19061370a565b801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b505050505081565b60008181526035602052604081205461097a5760405162461bcd60e51b81526004016109719061356f565b60405180910390fd5b506000908152603860205260409020546001600160a01b031690565b6109a13383836121f1565b5050565b6109b1621000006121d6565b6109cd5760405162461bcd60e51b815260040161097190613603565b6000828152603c6020526040908190209051839133917f7989fff0ffb34805e8b3574b890ed6157f85a384c69b9a0c04991b24cabb825991610a10918690613492565b60405180910390a36000828152603c602090815260409091208251610a3792840190612d60565b505050565b6001600160a01b03831633148015610a595750610a5960016117b5565b80610a7d57506001600160a01b0383163314801590610a7d5750610a7d60026117b5565b6001600160a01b0384163314610ac8576040518060400160405280602081526020017f7472616e7366657273206f6e20626568616c66206172652064697361626c6564815250610af8565b604051806040016040528060168152602001751d1c985b9cd9995c9cc8185c9948191a5cd8589b195960521b8152505b90610b165760405162461bcd60e51b8152600401610971919061347f565b506001600160a01b038216610b3d5760405162461bcd60e51b8152600401610971906135dd565b610b468161172f565b6001600160a01b0316836001600160a01b031614610b765760405162461bcd60e51b815260040161097190613603565b6001600160a01b038316331480610ba65750610b9181610946565b6001600160a01b0316336001600160a01b0316145b80610bb65750610bb683336121a8565b610bd25760405162461bcd60e51b815260040161097190613603565b610bdb81611d6b565b610c165760405162461bcd60e51b815260206004820152600c60248201526b3637b1b5b2b2103a37b5b2b760a11b6044820152606401610971565b816001600160a01b0316836001600160a01b031614610cbf57610c38816122ee565b6001600160a01b0382166000818152603660209081526040808320805486855260358452918420805460a09390931b63ffffffff60a01b1663ffffffff60c01b909316929092179094179055825460018101845592825290206008820401805460079092166004026101000a63ffffffff8181021990931692841602919091179055610cc9565b610cc98382612476565b80826001600160a01b0316846001600160a01b03166000805160206137cd83398151915260405160405180910390a4505050565b610d09620100006121d6565b610d255760405162461bcd60e51b815260040161097190613603565b6001600160a01b038316610d4b5760405162461bcd60e51b8152600401610971906135dd565b60018111610d8c5760405162461bcd60e51b815260206004820152600e60248201526d1b881a5cc81d1bdbc81cdb585b1b60921b6044820152606401610971565b818263ffffffff1614610dd55760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610971565b6001610de18284613676565b610deb91906136c7565b6001610df78385613676565b610e0191906136c7565b63ffffffff1614610e4d5760405162461bcd60e51b81526020600482015260166024820152756e2d746820746f6b656e204944206f766572666c6f7760501b6044820152606401610971565b60005b81811015610eb557610e656105b38285613676565b15610ea35760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610971565b80610ead81613745565b915050610e50565b50610ec18383836124cb565b60005b81811015610f0c57610ed68184613676565b6040516001600160a01b038616906000906000805160206137cd833981519152908290a480610f0481613745565b915050610ec4565b50505050565b6000610f1d83611771565b8210610f615760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610971565b6001600160a01b0383166000908152603660205260409020805483908110610f9957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060088204015460079091166004026101000a900463ffffffff16905092915050565b604080518082018252600c81526b54696e79455243373231763160a01b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f551db5283b6851bbd9bc94ddacddf94c131900f6dbabedf6638c7e849fa2a2f681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b61106a620100006121d6565b6110865760405162461bcd60e51b815260040161097190613603565b6001600160a01b0382166110ac5760405162461bcd60e51b8152600401610971906135dd565b808163ffffffff16146110f55760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610971565b600081815260356020526040902054156111425760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610971565b61122881836001600160a01b031660008181526036602090815260408083208054603780548887526035865293862063ffffffff60c01b60c09590951b9490941663ffffffff60a01b60a09390931b92909216919091179095179091558054600181810183559184529183206008808404909101805463ffffffff97881660046007968716810261010090810a838102908c02199094169390931790935587549485018855969095529082047f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae018054929093160290920a928302929093021916179055565b60405181906001600160a01b038416906000906000805160206137cd833981519152908290a45050565b610a3783838360405180602001604052806000815250611d9e565b60006112788261172f565b9050611286620200006121d6565b6113bd576001600160a01b038116331480156112a757506112a760086117b5565b806112cb57506001600160a01b03811633148015906112cb57506112cb60106117b5565b6001600160a01b0382163314611316576040518060400160405280601c81526020017f6275726e73206f6e20626568616c66206172652064697361626c656400000000815250611342565b60405180604001604052806012815260200171189d5c9b9cc8185c9948191a5cd8589b195960721b8152505b906113605760405162461bcd60e51b8152600401610971919061347f565b506001600160a01b038116331480611391575061137c82610946565b6001600160a01b0316336001600160a01b0316145b806113a157506113a181336121a8565b6113bd5760405162461bcd60e51b815260040161097190613603565b6113c682612590565b6000828152603c602052604081206113dd91612de4565b60405182906000906001600160a01b038416906000805160206137cd833981519152908390a45050565b600061141260375490565b82106114565760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610971565b6037828154811061147757634e487b7160e01b600052603260045260246000fd5b6000918252602090912060088204015460079091166004026101000a900463ffffffff1692915050565b6114ad621000006121d6565b6114c95760405162461bcd60e51b815260040161097190613603565b336001600160a01b03167fac455070f26733cc10c09e4389a74bf73bdb676d730ee31215c31d20daa88005603b83604051611505929190613492565b60405180910390a280516109a190603b906020840190612d60565b600054610100900460ff16158080156115405750600054600160ff909116105b8061155a5750303b15801561155a575060005460ff166001145b6115bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610971565b6000805460ff1916600117905580156115e0576000805461ff0019166101001790555b60008451116116295760405162461bcd60e51b81526020600482015260156024820152741d1bdad95b881b985b59481a5cc81b9bdd081cd95d605a1b6044820152606401610971565b600083511161167a5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e2073796d626f6c206973206e6f74207365740000000000000000006044820152606401610971565b835161168d906033906020870190612d60565b5082516116a1906034906020860190612d60565b506001600160a01b0385161515806116b857508115155b156116c7576116c78583612706565b801561170d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610a3783838360405180602001604052806000815250611c71565b6000818152603560205260408120546001600160a01b0381166108b25760405162461bcd60e51b81526004016109719061356f565b603b80546108c59061370a565b60006001600160a01b0382166117995760405162461bcd60e51b8152600401610971906135dd565b506001600160a01b031660009081526036602052604090205490565b306000908152600160205260408120546108b2905b8316831490565b6117db838361105e565b6001600160a01b0383163b15610a3757604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906118209033908590889088906004016133e1565b602060405180830381600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187291906132c2565b90506001600160e01b03198116630a85bd0160e11b14610f0c5760405162461bcd60e51b81526004016109719061359c565b6118af6104006117b5565b6118fb5760405162461bcd60e51b815260206004820152601d60248201527f6f70657261746f72207065726d697473206172652064697361626c65640000006044820152606401610971565b6001600160a01b0387166000908152603a6020526040812080546119a1917f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee918b918b918b918761194b83613745565b909155506040805160208101969096526001600160a01b03948516908601529290911660608401521515608083015260a082015260c0810187905260e0015b604051602081830303815290604052858585612789565b9050876001600160a01b0316816001600160a01b0316146119d45760405162461bcd60e51b815260040161097190613544565b844210611a175760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610971565b611a228888886127ee565b5050505050505050565b603480546108c59061370a565b6109a18282604051806020016040528060008152506117d1565b6109a13383836127ee565b60608167ffffffffffffffff811115611a8757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611aba57816020015b6060815260200190600190039081611aa55790505b50905060005b82811015611be55760008030868685818110611aec57634e487b7160e01b600052603260045260246000fd5b9050602002810190611afe919061362a565b604051611b0c9291906133a2565b600060405180830381855af49150503d8060008114611b47576040519150601f19603f3d011682016040523d82523d6000602084013e611b4c565b606091505b509150915081611ba457805115611b665780518082602001fd5b60405162461bcd60e51b815260206004820152601360248201527219195b1959d85d1958d85b1b0819985a5b1959606a1b6044820152606401610971565b80848481518110611bc557634e487b7160e01b600052603260045260246000fd5b602002602001018190525050508080611bdd90613745565b915050611ac0565b5092915050565b611bf9600160ff1b6121d6565b611c155760405162461bcd60e51b815260040161097190613603565b6109a18282611c6c33611c3d876001600160a01b031660009081526001602052604090205490565b6001600160a01b0391909116600090815260016020526040902054600019808818821618908716919091171690565b6128ad565b611c7c848484610cfd565b6001600160a01b0384163b15610f0c5760005b8281101561170d5760006001600160a01b03861663150b7a023383611cb4868a613676565b876040518563ffffffff1660e01b8152600401611cd494939291906133e1565b602060405180830381600087803b158015611cee57600080fd5b505af1158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2691906132c2565b90506001600160e01b03198116630a85bd0160e11b14611d585760405162461bcd60e51b81526004016109719061359c565b5080611d6381613745565b915050611c8f565b600081815260356020526040812054611d965760405162461bcd60e51b81526004016109719061356f565b506001919050565b611da9848484610a3c565b6001600160a01b0383163b15610f0c57604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611dee9033908990889088906004016133e1565b602060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4091906132c2565b90506001600160e01b03198116630a85bd0160e11b1461170d5760405162461bcd60e51b81526004016109719061359c565b6001600160a01b038216600090815260016020526040812054611e94906117ca565b9392505050565b600081815260356020526040902054606090611ec95760405162461bcd60e51b81526004016109719061356f565b6000828152603c602052604081208054611ee29061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e9061370a565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b50505050509050600081511115611f725792915050565b603b8054611f7f9061370a565b15159050611f9d575050604080516020810190915260008152919050565b611e94603b8054611fad9061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd99061370a565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b505050505061203685600a612907565b612b22565b6120466102006117b5565b6120895760405162461bcd60e51b81526020600482015260146024820152731c195c9b5a5d1cc8185c9948191a5cd8589b195960621b6044820152606401610971565b6001600160a01b0387166000908152603a60205260408120805461211a917fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29918b918b918b91876120d983613745565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00161198a565b9050876001600160a01b0316816001600160a01b03161461214d5760405162461bcd60e51b815260040161097190613544565b8442106121905760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610971565b611a228888886121f1565b6121a53082611bec565b50565b6001600160a01b03918216600090815260396020908152604080832093909416825291909152205460ff1690565b60006108b23383611e72565b6001600160a01b03163b151590565b60006121fc8261172f565b9050806001600160a01b0316836001600160a01b031614156122505760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610971565b806001600160a01b0316846001600160a01b03161480612275575061227581856121a8565b6122915760405162461bcd60e51b815260040161097190613603565b60008281526038602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b6000818152603560209081526040808320546001600160a01b03811684526036909252822080549192909160a084901c9190839061232e906001906136c7565b8154811061234c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506001838054905061238591906136c7565b8263ffffffff16146124245763ffffffff81811660009081526035602052604090208054600167ffffffff0000000160a01b031663ffffffff60a01b60a086901b161790558354829185919085169081106123f057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b8280548061244257634e487b7160e01b600052603160045260246000fd5b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a0219169055905561170d84865b60008181526038602052604080822080546001600160a01b0319169055518291906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b6001600160a01b0383166000908152603660205260408120905b828110156125785781546001600160a01b0386169060a090612508908490613676565b6001600160c01b0316901b6001600160c01b031660c08360378054905061252f9190613676565b6001600160e01b0316901b17176001600160e01b03166035600083876125559190613676565b81526020810191909152604001600020558061257081613745565b9150506124e5565b50612584818484612b4e565b610f0c60378484612b4e565b612599816122ee565b60008181526035602052604081208054908290556037805460c09290921c92916125c5906001906136c7565b815481106125e357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050600160378054905061261d91906136c7565b8263ffffffff16146126b45763ffffffff818116600090815260356020526040902080546001600160c01b031663ffffffff60c01b60c086901b16179055603780548392851690811061268057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b60378054806126d357634e487b7160e01b600052603160045260246000fd5b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055505050565b600054610100900460ff166127715760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610971565b61277e82600019806128ad565b6109a13082836128ad565b835160208501206000908161279c610fc5565b60405161190160f01b602082015260228101919091526042810183905260620160405160208183030381529060405280519060200120905060006127e282888888612c06565b98975050505050505050565b826001600160a01b0316826001600160a01b031614156128405760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610971565b6001600160a01b03838116600081815260396020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b60608160ff166002148061291e57508160ff166008145b8061292c57508160ff16600a145b8061293a57508160ff166010145b61294357600080fd5b8261296657506040805180820190915260018152600360fc1b60208201526108b2565b60408051610100808252610120820190925260009160208201818036833701905050905060005b8415612a295760006129a260ff861687613760565b905060006129b182603061368e565b9050600a8260ff16106129cc576129c960078261368e565b90505b8060f81b8484806129dc90613745565b9550815181106129fc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612a2060ff8716886136b3565b9650505061298d565b60008167ffffffffffffffff811115612a5257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a7c576020820181803683370190505b509050600091505b8051821015612b1957828281518110612aad57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b816001848451612ac891906136c7565b612ad291906136c7565b81518110612af057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535081612b1181613745565b925050612a84565b95945050505050565b60608282604051602001612b379291906133b2565b604051602081830303815290604052905092915050565b82548181018455836000526008810460206000200160088206915081151915612bb3578160080383811115612b805750825b815460005b82811015612ba4578681018582016020021b9190911790600101612b85565b50825593840193909203916001015b600091505b8282101561170d57600883811115612bcd5750825b6000805b82811015612bf0578481018701602082021b9190911790600101612bd1565b5080600885048401555050600882019150612bb8565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612c785760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610971565b8360ff16601b1480612c8d57508360ff16601c145b612cd95760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610971565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612d2d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b195760405162461bcd60e51b815260040161097190613544565b828054612d6c9061370a565b90600052602060002090601f016020900481019282612d8e5760008555612dd4565b82601f10612da757805160ff1916838001178555612dd4565b82800160010185558215612dd4579182015b82811115612dd4578251825591602001919060010190612db9565b50612de0929150612e1a565b5090565b508054612df09061370a565b6000825580601f10612e00575050565b601f0160209004906000526020600020908101906121a591905b5b80821115612de05760008155600101612e1b565b80356001600160a01b0381168114612e4657600080fd5b919050565b80358015158114612e4657600080fd5b600082601f830112612e6b578081fd5b813567ffffffffffffffff80821115612e8657612e866137a0565b604051601f8301601f19908116603f01168101908282118183101715612eae57612eae6137a0565b81604052838152866020858801011115612ec6578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff81168114612e4657600080fd5b600060208284031215612f04578081fd5b611e9482612e2f565b60008060408385031215612f1f578081fd5b612f2883612e2f565b9150612f3660208401612e2f565b90509250929050565b600080600080600080600060e0888a031215612f59578283fd5b612f6288612e2f565b9650612f7060208901612e2f565b9550612f7e60408901612e4b565b945060608801359350612f9360808901612ee2565b925060a0880135915060c0880135905092959891949750929550565b600080600060608486031215612fc3578283fd5b612fcc84612e2f565b9250612fda60208501612e2f565b9150604084013590509250925092565b60008060008060808587031215612fff578384fd5b61300885612e2f565b935061301660208601612e2f565b925060408501359150606085013567ffffffffffffffff811115613038578182fd5b61304487828801612e5b565b91505092959194509250565b600080600080600080600060e0888a03121561306a578283fd5b61307388612e2f565b965061308160208901612e2f565b95506040880135945060608801359350612f9360808901612ee2565b600080604083850312156130af578182fd5b6130b883612e2f565b9150612f3660208401612e4b565b600080600080608085870312156130db578384fd5b6130e485612e2f565b9350602085013567ffffffffffffffff80821115613100578485fd5b61310c88838901612e5b565b94506040870135915080821115613121578384fd5b5061312e87828801612e5b565b949793965093946060013593505050565b60008060408385031215613151578182fd5b61315a83612e2f565b946020939093013593505050565b60008060006060848603121561317c578081fd5b61318584612e2f565b925060208401359150604084013567ffffffffffffffff8111156131a7578182fd5b6131b386828701612e5b565b9150509250925092565b6000806000606084860312156131d1578081fd5b6131da84612e2f565b95602085013595506040909401359392505050565b60008060008060808587031215613204578182fd5b61320d85612e2f565b93506020850135925060408501359150606085013567ffffffffffffffff811115613038578182fd5b60008060208385031215613248578182fd5b823567ffffffffffffffff8082111561325f578384fd5b818501915085601f830112613272578384fd5b813581811115613280578485fd5b8660208260051b8501011115613294578485fd5b60209290920196919550909350505050565b6000602082840312156132b7578081fd5b8135611e94816137b6565b6000602082840312156132d3578081fd5b8151611e94816137b6565b6000602082840312156132ef578081fd5b813567ffffffffffffffff811115613305578182fd5b61331184828501612e5b565b949350505050565b60006020828403121561332a578081fd5b5035919050565b60008060408385031215613343578182fd5b82359150602083013567ffffffffffffffff811115613360578182fd5b61336c85828601612e5b565b9150509250929050565b6000815180845261338e8160208601602086016136de565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b600083516133c48184602088016136de565b8351908301906133d88183602088016136de565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061341490830184613376565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561347257603f19888603018452613460858351613376565b94509285019290850190600101613444565b5092979650505050505050565b602081526000611e946020830184613376565b60408152600080845482600182811c9150808316806134b257607f831692505b60208084108214156134d257634e487b7160e01b87526022600452602487fd5b60408801849052606088018280156134f157600181146135025761352c565b60ff1987168252828201975061352c565b60008c815260209020895b878110156135265781548482015290860190840161350d565b83019850505b5050878603818901525050505050612b198185613376565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b6020808252601390820152721d1bdad95b88191bd95cdb89dd08195e1a5cdd606a1b604082015260600190565b60208082526021908201527f696e76616c6964206f6e455243373231526563656976656420726573706f6e736040820152606560f81b606082015260800190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b6000808335601e19843603018112613640578283fd5b83018035915067ffffffffffffffff82111561365a578283fd5b60200191503681900382131561366f57600080fd5b9250929050565b6000821982111561368957613689613774565b500190565b600060ff821660ff84168060ff038211156136ab576136ab613774565b019392505050565b6000826136c2576136c261378a565b500490565b6000828210156136d9576136d9613774565b500390565b60005b838110156136f95781810151838201526020016136e1565b83811115610f0c5750506000910152565b600181811c9082168061371e57607f821691505b6020821081141561373f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561375957613759613774565b5060010190565b60008261376f5761376f61378a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146121a557600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220cb324fb9bbc5135fb186f103f079e94c024219b6134d16ce64c1e146c307aa3764736f6c63430008040033496e697469616c697a61626c653a20636f6e747261637420697320616c7265617f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061038e5760003560e01c80636c0360eb116101de578063ae60bda41161010f578063c688d693116100ad578063e62cac761161007c578063e62cac76146107dd578063e985e9c5146107e7578063f63c2f82146107fa578063fcc2c0781461080257600080fd5b8063c688d69314610791578063c87b56dd146107a4578063d505accf146107b7578063d5bb7f67146107ca57600080fd5b8063b2564569116100e9578063b25645691461074e578063b3c6501514610761578063b88d4fde14610776578063c0d6568d1461078957600080fd5b8063ae60bda414610725578063ae682e2e14610730578063af65e2a81461073b57600080fd5b80639032c7261161017c578063a144819411610156578063a1448194146106cc578063a22cb465146106df578063ac9650d8146106f2578063ae5b102e1461071257600080fd5b80639032c726146106a957806395d89b41146106bc57806398b622a2146106c457600080fd5b8063768bfc9a116101b8578063768bfc9a1461067b5780638832e6e3146106845780638d4e57e6146106975780638f6fba8c146106a157600080fd5b80636c0360eb1461064d57806370a0823114610655578063725f36261461066857600080fd5b80632f745c59116102c35780634427673311610261578063585956d611610230578063585956d6146105ed5780635a0ff57b1461061457806361587911146106275780636352211e1461063a57600080fd5b8063442767331461057c5780634f558e79146105a55780634f6ccce7146105c757806355f804b3146105da57600080fd5b80633644e5151161029d5780633644e5151461053b57806340c10f191461054357806342842e0e1461055657806342966c681461056957600080fd5b80632f745c59146104e757806330adf81f146104fa578063313ce5671461052157600080fd5b806318160ddd1161033057806320606b701161030a57806320606b701461048557806323b872dd146104ac5780632b521416146104bf5780632e81aaea146104d457600080fd5b806318160ddd1461044b578063191d0ffc1461045d5780631a0b04ea1461047d57600080fd5b8063095ea7b31161036c578063095ea7b3146103fb5780630dc5b4241461041057806314b7b4e11461042e578063162094c41461043857600080fd5b806301ffc9a71461039357806306fdde03146103bb578063081812fc146103d0575b600080fd5b6103a66103a13660046132a6565b610815565b60405190151581526020015b60405180910390f35b6103c36108b8565b6040516103b2919061347f565b6103e36103de366004613319565b610946565b6040516001600160a01b0390911681526020016103b2565b61040e61040936600461313f565b610996565b005b61041961020081565b60405163ffffffff90911681526020016103b2565b6104196210000081565b61040e610446366004613331565b6109a5565b6037545b6040519081526020016103b2565b61044f61046b366004612ef3565b603a6020526000908152604090205481565b610419600881565b61044f7f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a86681565b61040e6104ba366004612faf565b610a3c565b3060009081526001602052604090205461044f565b61040e6104e23660046131bd565b610cfd565b61044f6104f536600461313f565b610f12565b61044f7fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d2981565b610529600081565b60405160ff90911681526020016103b2565b61044f610fc5565b61040e61055136600461313f565b61105e565b61040e610564366004612faf565b611252565b61040e610577366004613319565b61126d565b61044f61058a366004612ef3565b6001600160a01b031660009081526001602052604090205490565b6103a66105b3366004613319565b600090815260356020526040902054151590565b61044f6105d5366004613319565b611407565b61040e6105e83660046132de565b6114a1565b61044f7f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee81565b61040e6106223660046130c6565b611520565b61040e6106353660046131bd565b611714565b6103e3610648366004613319565b61172f565b6103c3611764565b61044f610663366004612ef3565b611771565b6103a6610676366004613319565b6117b5565b61041961040081565b61040e610692366004613168565b6117d1565b6104196201000081565b610419600281565b61040e6106b7366004612f3f565b6118a4565b6103c3611a2c565b610529600881565b61040e6106da36600461313f565b611a39565b61040e6106ed36600461309d565b611a53565b610705610700366004613236565b611a5e565b6040516103b2919061341e565b61040e61072036600461313f565b611bec565b61044f600160fe1b81565b61044f600160ff1b81565b61040e6107493660046131ef565b611c71565b6103a661075c366004613319565b611d6b565b60005460405160ff90911681526020016103b2565b61040e610784366004612fea565b611d9e565b610419600181565b6103a661079f36600461313f565b611e72565b6103c36107b2366004613319565b611e9b565b61040e6107c5366004613050565b61203b565b61040e6107d8366004613319565b61219b565b6104196202000081565b6103a66107f5366004612f0d565b6121a8565b610419601081565b6103a6610810366004613319565b6121d6565b60006001600160e01b031982166301ffc9a760e01b148061084657506001600160e01b031982166380ac58cd60e01b145b8061086157506001600160e01b03198216635b5e139f60e01b145b8061087c57506001600160e01b0319821663780e9d6360e01b145b8061089757506001600160e01b03198216633197b5d160e21b145b806108b257506001600160e01b03198216630852cd8d60e31b145b92915050565b603380546108c59061370a565b80601f01602080910402602001604051908101604052809291908181526020018280546108f19061370a565b801561093e5780601f106109135761010080835404028352916020019161093e565b820191906000526020600020905b81548152906001019060200180831161092157829003601f168201915b505050505081565b60008181526035602052604081205461097a5760405162461bcd60e51b81526004016109719061356f565b60405180910390fd5b506000908152603860205260409020546001600160a01b031690565b6109a13383836121f1565b5050565b6109b1621000006121d6565b6109cd5760405162461bcd60e51b815260040161097190613603565b6000828152603c6020526040908190209051839133917f7989fff0ffb34805e8b3574b890ed6157f85a384c69b9a0c04991b24cabb825991610a10918690613492565b60405180910390a36000828152603c602090815260409091208251610a3792840190612d60565b505050565b6001600160a01b03831633148015610a595750610a5960016117b5565b80610a7d57506001600160a01b0383163314801590610a7d5750610a7d60026117b5565b6001600160a01b0384163314610ac8576040518060400160405280602081526020017f7472616e7366657273206f6e20626568616c66206172652064697361626c6564815250610af8565b604051806040016040528060168152602001751d1c985b9cd9995c9cc8185c9948191a5cd8589b195960521b8152505b90610b165760405162461bcd60e51b8152600401610971919061347f565b506001600160a01b038216610b3d5760405162461bcd60e51b8152600401610971906135dd565b610b468161172f565b6001600160a01b0316836001600160a01b031614610b765760405162461bcd60e51b815260040161097190613603565b6001600160a01b038316331480610ba65750610b9181610946565b6001600160a01b0316336001600160a01b0316145b80610bb65750610bb683336121a8565b610bd25760405162461bcd60e51b815260040161097190613603565b610bdb81611d6b565b610c165760405162461bcd60e51b815260206004820152600c60248201526b3637b1b5b2b2103a37b5b2b760a11b6044820152606401610971565b816001600160a01b0316836001600160a01b031614610cbf57610c38816122ee565b6001600160a01b0382166000818152603660209081526040808320805486855260358452918420805460a09390931b63ffffffff60a01b1663ffffffff60c01b909316929092179094179055825460018101845592825290206008820401805460079092166004026101000a63ffffffff8181021990931692841602919091179055610cc9565b610cc98382612476565b80826001600160a01b0316846001600160a01b03166000805160206137cd83398151915260405160405180910390a4505050565b610d09620100006121d6565b610d255760405162461bcd60e51b815260040161097190613603565b6001600160a01b038316610d4b5760405162461bcd60e51b8152600401610971906135dd565b60018111610d8c5760405162461bcd60e51b815260206004820152600e60248201526d1b881a5cc81d1bdbc81cdb585b1b60921b6044820152606401610971565b818263ffffffff1614610dd55760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610971565b6001610de18284613676565b610deb91906136c7565b6001610df78385613676565b610e0191906136c7565b63ffffffff1614610e4d5760405162461bcd60e51b81526020600482015260166024820152756e2d746820746f6b656e204944206f766572666c6f7760501b6044820152606401610971565b60005b81811015610eb557610e656105b38285613676565b15610ea35760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610971565b80610ead81613745565b915050610e50565b50610ec18383836124cb565b60005b81811015610f0c57610ed68184613676565b6040516001600160a01b038616906000906000805160206137cd833981519152908290a480610f0481613745565b915050610ec4565b50505050565b6000610f1d83611771565b8210610f615760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610971565b6001600160a01b0383166000908152603660205260409020805483908110610f9957634e487b7160e01b600052603260045260246000fd5b6000918252602090912060088204015460079091166004026101000a900463ffffffff16905092915050565b604080518082018252600c81526b54696e79455243373231763160a01b60209182015281517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866818301527f551db5283b6851bbd9bc94ddacddf94c131900f6dbabedf6638c7e849fa2a2f681840152466060820152306080808301919091528351808303909101815260a0909101909252815191012090565b61106a620100006121d6565b6110865760405162461bcd60e51b815260040161097190613603565b6001600160a01b0382166110ac5760405162461bcd60e51b8152600401610971906135dd565b808163ffffffff16146110f55760405162461bcd60e51b8152602060048201526011602482015270746f6b656e204944206f766572666c6f7760781b6044820152606401610971565b600081815260356020526040902054156111425760405162461bcd60e51b815260206004820152600e60248201526d185b1c9958591e481b5a5b9d195960921b6044820152606401610971565b61122881836001600160a01b031660008181526036602090815260408083208054603780548887526035865293862063ffffffff60c01b60c09590951b9490941663ffffffff60a01b60a09390931b92909216919091179095179091558054600181810183559184529183206008808404909101805463ffffffff97881660046007968716810261010090810a838102908c02199094169390931790935587549485018855969095529082047f42a7b7dd785cd69714a189dffb3fd7d7174edc9ece837694ce50f7078f7c31ae018054929093160290920a928302929093021916179055565b60405181906001600160a01b038416906000906000805160206137cd833981519152908290a45050565b610a3783838360405180602001604052806000815250611d9e565b60006112788261172f565b9050611286620200006121d6565b6113bd576001600160a01b038116331480156112a757506112a760086117b5565b806112cb57506001600160a01b03811633148015906112cb57506112cb60106117b5565b6001600160a01b0382163314611316576040518060400160405280601c81526020017f6275726e73206f6e20626568616c66206172652064697361626c656400000000815250611342565b60405180604001604052806012815260200171189d5c9b9cc8185c9948191a5cd8589b195960721b8152505b906113605760405162461bcd60e51b8152600401610971919061347f565b506001600160a01b038116331480611391575061137c82610946565b6001600160a01b0316336001600160a01b0316145b806113a157506113a181336121a8565b6113bd5760405162461bcd60e51b815260040161097190613603565b6113c682612590565b6000828152603c602052604081206113dd91612de4565b60405182906000906001600160a01b038416906000805160206137cd833981519152908390a45050565b600061141260375490565b82106114565760405162461bcd60e51b8152602060048201526013602482015272696e646578206f7574206f6620626f756e647360681b6044820152606401610971565b6037828154811061147757634e487b7160e01b600052603260045260246000fd5b6000918252602090912060088204015460079091166004026101000a900463ffffffff1692915050565b6114ad621000006121d6565b6114c95760405162461bcd60e51b815260040161097190613603565b336001600160a01b03167fac455070f26733cc10c09e4389a74bf73bdb676d730ee31215c31d20daa88005603b83604051611505929190613492565b60405180910390a280516109a190603b906020840190612d60565b600054610100900460ff16158080156115405750600054600160ff909116105b8061155a5750303b15801561155a575060005460ff166001145b6115bd5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610971565b6000805460ff1916600117905580156115e0576000805461ff0019166101001790555b60008451116116295760405162461bcd60e51b81526020600482015260156024820152741d1bdad95b881b985b59481a5cc81b9bdd081cd95d605a1b6044820152606401610971565b600083511161167a5760405162461bcd60e51b815260206004820152601760248201527f746f6b656e2073796d626f6c206973206e6f74207365740000000000000000006044820152606401610971565b835161168d906033906020870190612d60565b5082516116a1906034906020860190612d60565b506001600160a01b0385161515806116b857508115155b156116c7576116c78583612706565b801561170d576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050505050565b610a3783838360405180602001604052806000815250611c71565b6000818152603560205260408120546001600160a01b0381166108b25760405162461bcd60e51b81526004016109719061356f565b603b80546108c59061370a565b60006001600160a01b0382166117995760405162461bcd60e51b8152600401610971906135dd565b506001600160a01b031660009081526036602052604090205490565b306000908152600160205260408120546108b2905b8316831490565b6117db838361105e565b6001600160a01b0383163b15610a3757604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a02906118209033908590889088906004016133e1565b602060405180830381600087803b15801561183a57600080fd5b505af115801561184e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061187291906132c2565b90506001600160e01b03198116630a85bd0160e11b14610f0c5760405162461bcd60e51b81526004016109719061359c565b6118af6104006117b5565b6118fb5760405162461bcd60e51b815260206004820152601d60248201527f6f70657261746f72207065726d697473206172652064697361626c65640000006044820152606401610971565b6001600160a01b0387166000908152603a6020526040812080546119a1917f47ab88482c90e4bb94b82a947ae78fa91fb25de1469ab491f4c15b9a0a2677ee918b918b918b918761194b83613745565b909155506040805160208101969096526001600160a01b03948516908601529290911660608401521515608083015260a082015260c0810187905260e0015b604051602081830303815290604052858585612789565b9050876001600160a01b0316816001600160a01b0316146119d45760405162461bcd60e51b815260040161097190613544565b844210611a175760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610971565b611a228888886127ee565b5050505050505050565b603480546108c59061370a565b6109a18282604051806020016040528060008152506117d1565b6109a13383836127ee565b60608167ffffffffffffffff811115611a8757634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611aba57816020015b6060815260200190600190039081611aa55790505b50905060005b82811015611be55760008030868685818110611aec57634e487b7160e01b600052603260045260246000fd5b9050602002810190611afe919061362a565b604051611b0c9291906133a2565b600060405180830381855af49150503d8060008114611b47576040519150601f19603f3d011682016040523d82523d6000602084013e611b4c565b606091505b509150915081611ba457805115611b665780518082602001fd5b60405162461bcd60e51b815260206004820152601360248201527219195b1959d85d1958d85b1b0819985a5b1959606a1b6044820152606401610971565b80848481518110611bc557634e487b7160e01b600052603260045260246000fd5b602002602001018190525050508080611bdd90613745565b915050611ac0565b5092915050565b611bf9600160ff1b6121d6565b611c155760405162461bcd60e51b815260040161097190613603565b6109a18282611c6c33611c3d876001600160a01b031660009081526001602052604090205490565b6001600160a01b0391909116600090815260016020526040902054600019808818821618908716919091171690565b6128ad565b611c7c848484610cfd565b6001600160a01b0384163b15610f0c5760005b8281101561170d5760006001600160a01b03861663150b7a023383611cb4868a613676565b876040518563ffffffff1660e01b8152600401611cd494939291906133e1565b602060405180830381600087803b158015611cee57600080fd5b505af1158015611d02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2691906132c2565b90506001600160e01b03198116630a85bd0160e11b14611d585760405162461bcd60e51b81526004016109719061359c565b5080611d6381613745565b915050611c8f565b600081815260356020526040812054611d965760405162461bcd60e51b81526004016109719061356f565b506001919050565b611da9848484610a3c565b6001600160a01b0383163b15610f0c57604051630a85bd0160e11b81526000906001600160a01b0385169063150b7a0290611dee9033908990889088906004016133e1565b602060405180830381600087803b158015611e0857600080fd5b505af1158015611e1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4091906132c2565b90506001600160e01b03198116630a85bd0160e11b1461170d5760405162461bcd60e51b81526004016109719061359c565b6001600160a01b038216600090815260016020526040812054611e94906117ca565b9392505050565b600081815260356020526040902054606090611ec95760405162461bcd60e51b81526004016109719061356f565b6000828152603c602052604081208054611ee29061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054611f0e9061370a565b8015611f5b5780601f10611f3057610100808354040283529160200191611f5b565b820191906000526020600020905b815481529060010190602001808311611f3e57829003601f168201915b50505050509050600081511115611f725792915050565b603b8054611f7f9061370a565b15159050611f9d575050604080516020810190915260008152919050565b611e94603b8054611fad9061370a565b80601f0160208091040260200160405190810160405280929190818152602001828054611fd99061370a565b80156120265780601f10611ffb57610100808354040283529160200191612026565b820191906000526020600020905b81548152906001019060200180831161200957829003601f168201915b505050505061203685600a612907565b612b22565b6120466102006117b5565b6120895760405162461bcd60e51b81526020600482015260146024820152731c195c9b5a5d1cc8185c9948191a5cd8589b195960621b6044820152606401610971565b6001600160a01b0387166000908152603a60205260408120805461211a917fee2282d7affd5a432b221a559e429129347b0c19a3f102179a5fb1859eef3d29918b918b918b91876120d983613745565b909155506040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810187905260e00161198a565b9050876001600160a01b0316816001600160a01b03161461214d5760405162461bcd60e51b815260040161097190613544565b8442106121905760405162461bcd60e51b81526020600482015260116024820152701cda59db985d1d5c9948195e1c1a5c9959607a1b6044820152606401610971565b611a228888886121f1565b6121a53082611bec565b50565b6001600160a01b03918216600090815260396020908152604080832093909416825291909152205460ff1690565b60006108b23383611e72565b6001600160a01b03163b151590565b60006121fc8261172f565b9050806001600160a01b0316836001600160a01b031614156122505760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610971565b806001600160a01b0316846001600160a01b03161480612275575061227581856121a8565b6122915760405162461bcd60e51b815260040161097190613603565b60008281526038602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a450505050565b6000818152603560209081526040808320546001600160a01b03811684526036909252822080549192909160a084901c9190839061232e906001906136c7565b8154811061234c57634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff1690506001838054905061238591906136c7565b8263ffffffff16146124245763ffffffff81811660009081526035602052604090208054600167ffffffff0000000160a01b031663ffffffff60a01b60a086901b161790558354829185919085169081106123f057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b8280548061244257634e487b7160e01b600052603160045260246000fd5b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a0219169055905561170d84865b60008181526038602052604080822080546001600160a01b0319169055518291906001600160a01b038516907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925908390a45050565b6001600160a01b0383166000908152603660205260408120905b828110156125785781546001600160a01b0386169060a090612508908490613676565b6001600160c01b0316901b6001600160c01b031660c08360378054905061252f9190613676565b6001600160e01b0316901b17176001600160e01b03166035600083876125559190613676565b81526020810191909152604001600020558061257081613745565b9150506124e5565b50612584818484612b4e565b610f0c60378484612b4e565b612599816122ee565b60008181526035602052604081208054908290556037805460c09290921c92916125c5906001906136c7565b815481106125e357634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004029054906101000a900463ffffffff169050600160378054905061261d91906136c7565b8263ffffffff16146126b45763ffffffff818116600090815260356020526040902080546001600160c01b031663ffffffff60c01b60c086901b16179055603780548392851690811061268057634e487b7160e01b600052603260045260246000fd5b90600052602060002090600891828204019190066004026101000a81548163ffffffff021916908363ffffffff1602179055505b60378054806126d357634e487b7160e01b600052603160045260246000fd5b600082815260209020600860001990920191820401805463ffffffff600460078516026101000a02191690559055505050565b600054610100900460ff166127715760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610971565b61277e82600019806128ad565b6109a13082836128ad565b835160208501206000908161279c610fc5565b60405161190160f01b602082015260228101919091526042810183905260620160405160208183030381529060405280519060200120905060006127e282888888612c06565b98975050505050505050565b826001600160a01b0316826001600160a01b031614156128405760405162461bcd60e51b815260206004820152600d60248201526c1cd95b1988185c1c1c9bdd985b609a1b6044820152606401610971565b6001600160a01b03838116600081815260396020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b03831660008181526001602090815260409182902084905581518581529081018490527fe9be537308880e0f56b7d7cfd7abf85f14c4934486d138f848b92a0cbaf659b4910160405180910390a2505050565b60608160ff166002148061291e57508160ff166008145b8061292c57508160ff16600a145b8061293a57508160ff166010145b61294357600080fd5b8261296657506040805180820190915260018152600360fc1b60208201526108b2565b60408051610100808252610120820190925260009160208201818036833701905050905060005b8415612a295760006129a260ff861687613760565b905060006129b182603061368e565b9050600a8260ff16106129cc576129c960078261368e565b90505b8060f81b8484806129dc90613745565b9550815181106129fc57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612a2060ff8716886136b3565b9650505061298d565b60008167ffffffffffffffff811115612a5257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612a7c576020820181803683370190505b509050600091505b8051821015612b1957828281518110612aad57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b816001848451612ac891906136c7565b612ad291906136c7565b81518110612af057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535081612b1181613745565b925050612a84565b95945050505050565b60608282604051602001612b379291906133b2565b604051602081830303815290604052905092915050565b82548181018455836000526008810460206000200160088206915081151915612bb3578160080383811115612b805750825b815460005b82811015612ba4578681018582016020021b9190911790600101612b85565b50825593840193909203916001015b600091505b8282101561170d57600883811115612bcd5750825b6000805b82811015612bf0578481018701602082021b9190911790600101612bd1565b5080600885048401555050600882019150612bb8565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0821115612c785760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202773272076616c756500000000006044820152606401610971565b8360ff16601b1480612c8d57508360ff16601c145b612cd95760405162461bcd60e51b815260206004820152601b60248201527f696e76616c6964207369676e6174757265202776272076616c756500000000006044820152606401610971565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015612d2d573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116612b195760405162461bcd60e51b815260040161097190613544565b828054612d6c9061370a565b90600052602060002090601f016020900481019282612d8e5760008555612dd4565b82601f10612da757805160ff1916838001178555612dd4565b82800160010185558215612dd4579182015b82811115612dd4578251825591602001919060010190612db9565b50612de0929150612e1a565b5090565b508054612df09061370a565b6000825580601f10612e00575050565b601f0160209004906000526020600020908101906121a591905b5b80821115612de05760008155600101612e1b565b80356001600160a01b0381168114612e4657600080fd5b919050565b80358015158114612e4657600080fd5b600082601f830112612e6b578081fd5b813567ffffffffffffffff80821115612e8657612e866137a0565b604051601f8301601f19908116603f01168101908282118183101715612eae57612eae6137a0565b81604052838152866020858801011115612ec6578485fd5b8360208701602083013792830160200193909352509392505050565b803560ff81168114612e4657600080fd5b600060208284031215612f04578081fd5b611e9482612e2f565b60008060408385031215612f1f578081fd5b612f2883612e2f565b9150612f3660208401612e2f565b90509250929050565b600080600080600080600060e0888a031215612f59578283fd5b612f6288612e2f565b9650612f7060208901612e2f565b9550612f7e60408901612e4b565b945060608801359350612f9360808901612ee2565b925060a0880135915060c0880135905092959891949750929550565b600080600060608486031215612fc3578283fd5b612fcc84612e2f565b9250612fda60208501612e2f565b9150604084013590509250925092565b60008060008060808587031215612fff578384fd5b61300885612e2f565b935061301660208601612e2f565b925060408501359150606085013567ffffffffffffffff811115613038578182fd5b61304487828801612e5b565b91505092959194509250565b600080600080600080600060e0888a03121561306a578283fd5b61307388612e2f565b965061308160208901612e2f565b95506040880135945060608801359350612f9360808901612ee2565b600080604083850312156130af578182fd5b6130b883612e2f565b9150612f3660208401612e4b565b600080600080608085870312156130db578384fd5b6130e485612e2f565b9350602085013567ffffffffffffffff80821115613100578485fd5b61310c88838901612e5b565b94506040870135915080821115613121578384fd5b5061312e87828801612e5b565b949793965093946060013593505050565b60008060408385031215613151578182fd5b61315a83612e2f565b946020939093013593505050565b60008060006060848603121561317c578081fd5b61318584612e2f565b925060208401359150604084013567ffffffffffffffff8111156131a7578182fd5b6131b386828701612e5b565b9150509250925092565b6000806000606084860312156131d1578081fd5b6131da84612e2f565b95602085013595506040909401359392505050565b60008060008060808587031215613204578182fd5b61320d85612e2f565b93506020850135925060408501359150606085013567ffffffffffffffff811115613038578182fd5b60008060208385031215613248578182fd5b823567ffffffffffffffff8082111561325f578384fd5b818501915085601f830112613272578384fd5b813581811115613280578485fd5b8660208260051b8501011115613294578485fd5b60209290920196919550909350505050565b6000602082840312156132b7578081fd5b8135611e94816137b6565b6000602082840312156132d3578081fd5b8151611e94816137b6565b6000602082840312156132ef578081fd5b813567ffffffffffffffff811115613305578182fd5b61331184828501612e5b565b949350505050565b60006020828403121561332a578081fd5b5035919050565b60008060408385031215613343578182fd5b82359150602083013567ffffffffffffffff811115613360578182fd5b61336c85828601612e5b565b9150509250929050565b6000815180845261338e8160208601602086016136de565b601f01601f19169290920160200192915050565b8183823760009101908152919050565b600083516133c48184602088016136de565b8351908301906133d88183602088016136de565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061341490830184613376565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b8701019250838701855b8281101561347257603f19888603018452613460858351613376565b94509285019290850190600101613444565b5092979650505050505050565b602081526000611e946020830184613376565b60408152600080845482600182811c9150808316806134b257607f831692505b60208084108214156134d257634e487b7160e01b87526022600452602487fd5b60408801849052606088018280156134f157600181146135025761352c565b60ff1987168252828201975061352c565b60008c815260209020895b878110156135265781548482015290860190840161350d565b83019850505b5050878603818901525050505050612b198185613376565b602080825260119082015270696e76616c6964207369676e617475726560781b604082015260600190565b6020808252601390820152721d1bdad95b88191bd95cdb89dd08195e1a5cdd606a1b604082015260600190565b60208082526021908201527f696e76616c6964206f6e455243373231526563656976656420726573706f6e736040820152606560f81b606082015260800190565b6020808252600c908201526b7a65726f206164647265737360a01b604082015260600190565b6020808252600d908201526c1858d8d95cdcc819195b9a5959609a1b604082015260600190565b6000808335601e19843603018112613640578283fd5b83018035915067ffffffffffffffff82111561365a578283fd5b60200191503681900382131561366f57600080fd5b9250929050565b6000821982111561368957613689613774565b500190565b600060ff821660ff84168060ff038211156136ab576136ab613774565b019392505050565b6000826136c2576136c261378a565b500490565b6000828210156136d9576136d9613774565b500390565b60005b838110156136f95781810151838201526020016136e1565b83811115610f0c5750506000910152565b600181811c9082168061371e57607f821691505b6020821081141561373f57634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561375957613759613774565b5060010190565b60008261376f5761376f61378a565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b0319811681146121a557600080fdfeddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220cb324fb9bbc5135fb186f103f079e94c024219b6134d16ce64c1e146c307aa3764736f6c63430008040033",
  "devdoc": {
    "author": "Basil Gorin",
    "details": "ERC721: contract has passed adopted OpenZeppelin ERC721 tests        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/ERC721.behavior.js        https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/test/token/ERC721/extensions/ERC721URIStorage.test.jsA note on token URI: there are major differences on how token URI behaves comparing to OZ impl:      1. A token URI can be set for non-existing token for pre-allocation purposes,         still the URI will be deleted once token is burnt      2. If token URI is set, base URI has no affect on the token URI, the two are not concatenated,         base URI is used to construct the token URI only if the latter was not explicitly setSupports EIP-712 powered permits - permit() - approve() with signature.      Supports EIP-712 powered operator permits - permitForAll() - setApprovalForAll() with signature.EIP712 Domain:      name: TinyERC721v1      version: not in use, omitted (name already contains version)      chainId: EIP-155 chain id      verifyingContract: deployed contract address      salt: permitNonces[owner], where owner is an address which allows operation on their tokensPermit type:      owner: address      operator: address      tokenId: uint256      nonce: uint256      deadline: uint256Permit typeHash:        keccak256(\"Permit(address owner,address operator,uint256 tokenId,uint256 nonce,uint256 deadline)\")PermitForAll type:      owner: address      operator: address      approved: bool      nonce: uint256      deadline: uint256PermitForAll typeHash:        keccak256(\"PermitForAll(address owner,address operator,bool approved,uint256 nonce,uint256 deadline)\")See https://eips.ethereum.org/EIPS/eip-712See usage examples in tests: erc721_permits.js",
    "events": {
      "BaseURIUpdated(address,string,string)": {
        "details": "Fired in setBaseURI()",
        "params": {
          "by": "an address which executed update",
          "newVal": "new _baseURI value",
          "oldVal": "old _baseURI value"
        }
      },
      "TokenURIUpdated(address,uint256,string,string)": {
        "details": "Fired in setTokenURI()",
        "params": {
          "by": "an address which executed update",
          "newVal": "new _baseURI value",
          "oldVal": "old _baseURI value",
          "tokenId": "token ID which URI was updated"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "The zero address indicates there is no approved address.  Throws unless `msg.sender` is the current NFT owner, or an authorized  operator of the current owner.",
        "params": {
          "_approved": "The new approved NFT controller",
          "_tokenId": "The NFT to approve"
        }
      },
      "balanceOf(address)": {
        "details": "NFTs assigned to the zero address are considered invalid, and this  function throws for queries about the zero address.",
        "params": {
          "_owner": "An address for whom to query the balance"
        },
        "returns": {
          "_0": "The number of NFTs owned by `_owner`, possibly zero"
        }
      },
      "burn(uint256)": {
        "details": "Destroys the token with token ID specifiedRequires executor to have `ROLE_TOKEN_DESTROYER` permission      or FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features to be enabledCan be disabled by the contract creator forever by disabling      FEATURE_OWN_BURNS/FEATURE_BURNS_ON_BEHALF features and then revoking      its own roles to burn tokens and to enable burning features",
        "params": {
          "_tokenId": "ID of the token to burn"
        }
      },
      "constructor": {
        "details": "Constructs/deploys ERC721 instance with the name and symbol specified",
        "params": {
          "_contractOwner": "smart contract owner (has minting/burning and all other permissions)",
          "_initialFeatures": "RBAC features enabled initially",
          "_name": "name of the token to be accessible as `name()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract",
          "_symbol": "token symbol to be accessible as `symbol()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract"
        }
      },
      "exists(uint256)": {
        "details": "Returns whether the specified token ID has an ownership      information associated with it",
        "params": {
          "_tokenId": "ID of the token to query existence for"
        },
        "returns": {
          "_0": "whether the token exists (true - exists, false - doesn't exist)"
        }
      },
      "features()": {
        "details": "Effectively reads userRoles role for the contract itself",
        "returns": {
          "_0": "256-bit bitmask of the features enabled"
        }
      },
      "getApproved(uint256)": {
        "details": "Throws if `_tokenId` is not a valid NFT.",
        "params": {
          "_tokenId": "The NFT to find the approved address for"
        },
        "returns": {
          "_0": "The approved address for this NFT, or the zero address if there is none"
        }
      },
      "getInitializedVersion()": {
        "details": "Highest version that has been initialized.      Non-zero value means contract was already initialized.see {Initializable}, {reinitializer}.",
        "returns": {
          "_0": "highest version that has been initialized"
        }
      },
      "getRole(address)": {
        "details": "Having a simple getter instead of making the mapping public      allows enforcing the encapsulation of the mapping and protects from      writing to it directly in the inheriting smart contracts",
        "params": {
          "operator": "address of a user to read permissions for,      or self address to read global features of the smart contract"
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "_operator": "The address that acts on behalf of the owner",
          "_owner": "The address that owns the NFTs"
        },
        "returns": {
          "_0": "True if `_operator` is an approved operator for `_owner`, false otherwise"
        }
      },
      "isFeatureEnabled(uint256)": {
        "params": {
          "required": "set of features to check against"
        },
        "returns": {
          "_0": "true if all the features requested are enabled, false otherwise"
        }
      },
      "isOperatorInRole(address,uint256)": {
        "params": {
          "operator": "address of the user to check role for",
          "required": "set of permissions (role) to check"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isSenderInRole(uint256)": {
        "params": {
          "required": "set of permissions (role) to check against"
        },
        "returns": {
          "_0": "true if all the permissions requested are enabled, false otherwise"
        }
      },
      "isTransferable(uint256)": {
        "details": "Verifies if token is transferable (i.e. can change ownership, allowed to be transferred);      The default behaviour is to always allow transfer if token existsImplementations may modify the default behaviour based on token metadata      if required",
        "params": {
          "_tokenId": "ID of the token to check if it's transferable"
        },
        "returns": {
          "_0": "true if token is transferable, false otherwise"
        }
      },
      "mint(address,uint256)": {
        "details": "Creates new token with token ID specified      and assigns an ownership `_to` for this tokenUnsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMint` instead of `mint`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint"
        }
      },
      "mintBatch(address,uint256,uint256)": {
        "details": "Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Unsafe: doesn't execute `onERC721Received` on the receiver.      Prefer the use of `saveMintBatch` instead of `mintBatch`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint tokens to",
          "_tokenId": "ID of the first token to mint",
          "n": "how many tokens to mint, sequentially increasing the _tokenId"
        }
      },
      "multicall(bytes[])": {
        "details": "Multicall support: a function to batch together multiple calls in a single external call.Receives and executes a batch of function calls on this contract.",
        "params": {
          "data": "an array of ABI-encoded function calls"
        },
        "returns": {
          "results": "an array of ABI-encoded results of the function calls"
        }
      },
      "ownerOf(uint256)": {
        "details": "NFTs assigned to zero address are considered invalid, and queries  about them do throw.",
        "params": {
          "_tokenId": "The identifier for an NFT"
        },
        "returns": {
          "_0": "The address of the owner of the NFT"
        }
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "details": "Executes approve(_operator, _tokenId) on behalf of the token owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_tokenId` as the allowance of `_operator` over `_owner` token,      given `_owner` EIP-712 signed approvalEmits `Approval` event in the same way as `approve` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification",
        "params": {
          "_exp": "signature expiration time (unix timestamp)",
          "_operator": "new approved NFT controller",
          "_owner": "owner of the token to set approval on behalf of,      an address which signed the EIP-712 message",
          "_tokenId": "token ID to approve",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)": {
        "details": "Executes setApprovalForAll(_operator, _approved) on behalf of the owner      who EIP-712 signed the transaction, i.e. as if transaction sender is the EIP712 signerSets the `_operator` as the token operator for `_owner` tokens,      given `_owner` EIP-712 signed approvalEmits `ApprovalForAll` event in the same way as `setApprovalForAll` doesRequires:     - `_operator` to be non-zero address     - `_exp` to be a timestamp in the future     - `v`, `r` and `s` to be a valid `secp256k1` signature from `_owner`        over the EIP712-formatted function arguments.     - the signature to use `_owner` current nonce (see `permitNonces`).For more information on the signature format, see the      https://eips.ethereum.org/EIPS/eip-2612#specification",
        "params": {
          "_approved": "true if the operator is approved, false to revoke approval",
          "_exp": "signature expiration time (unix timestamp)",
          "_operator": "an address to add to the set of authorized operators, i.e.      an address approved by the token owner to spend tokens on its behalf",
          "_owner": "owner of the tokens to set approval on behalf of,      an address which signed the EIP-712 message",
          "r": "half of the ECDSA signature pair",
          "s": "half of the ECDSA signature pair",
          "v": "the recovery byte of the signature"
        }
      },
      "postConstruct(address,string,string,uint256)": {
        "details": "\"Constructor replacement\" for a smart contract with a delayed initialization (post-deployment initialization)",
        "params": {
          "_contractOwner": "smart contract owner (has minting/burning and all other permissions)",
          "_initialFeatures": "RBAC features enabled initially",
          "_name": "name of the token to be accessible as `name()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract",
          "_symbol": "token symbol to be accessible as `symbol()`,      ERC-20 compatible descriptive name for a collection of NFTs in this contract"
        }
      },
      "safeMint(address,uint256)": {
        "details": "Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint"
        }
      },
      "safeMint(address,uint256,bytes)": {
        "details": "Creates new token with token ID specified      and assigns an ownership `_to` for this tokenChecks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_data": "additional data with no specified format, sent in call to `_to`",
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint"
        }
      },
      "safeMintBatch(address,uint256,uint256)": {
        "details": "Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint",
          "n": "how many tokens to mint, sequentially increasing the _tokenId"
        }
      },
      "safeMintBatch(address,uint256,uint256,bytes)": {
        "details": "Creates new tokens starting with token ID specified      and assigns an ownership `_to` for these tokensToken IDs to be minted: [_tokenId, _tokenId + n)n must be greater or equal 2: `n > 1`Checks if `_to` is a smart contract (code size > 0). If so, it calls      `onERC721Received` on `_to` and throws if the return value is not      `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.Requires executor to have `ROLE_TOKEN_CREATOR` permission",
        "params": {
          "_data": "additional data with no specified format, sent in call to `_to`",
          "_to": "an address to mint token to",
          "_tokenId": "ID of the token to mint",
          "n": "how many tokens to mint, sequentially increasing the _tokenId"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "This works identically to the other function with an extra data parameter,  except this function just sets data to \"\".",
        "params": {
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT. When transfer is complete, this function  checks if `_to` is a smart contract (code size > 0). If so, it calls  `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`.",
        "params": {
          "_data": "Additional data with no specified format, sent in call to `_to`",
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "setApprovalForAll(address,bool)": {
        "details": "Emits the ApprovalForAll event. The contract MUST allow  multiple operators per owner.",
        "params": {
          "_approved": "True if the operator is approved, false to revoke approval",
          "_operator": "Address to add to the set of authorized operators"
        }
      },
      "setBaseURI(string)": {
        "details": "Restricted access function which updates base URI used to construct      ERC721Metadata.tokenURIRequires executor to have ROLE_URI_MANAGER permission",
        "params": {
          "_baseURI": "new base URI to set"
        }
      },
      "setTokenURI(uint256,string)": {
        "details": "Sets the token URI for the token defined by its ID",
        "params": {
          "_tokenId": "an ID of the token to set URI for",
          "_tokenURI": "token URI to set"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Interface identification is specified in ERC-165.      This function uses less than 30,000 gas.",
        "params": {
          "interfaceID": "The interface identifier, as specified in ERC-165"
        },
        "returns": {
          "_0": "`true` if the contract implements `interfaceID` and      `interfaceID` is not 0xffffffff, `false` otherwise"
        }
      },
      "tokenByIndex(uint256)": {
        "details": "Throws if `_index` >= `totalSupply()`.",
        "params": {
          "_index": "A counter less than `totalSupply()`"
        },
        "returns": {
          "_0": "The token identifier for the `_index`th NFT,  (sort order not specified)"
        }
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "Throws if `_index` >= `balanceOf(_owner)` or if  `_owner` is the zero address, representing invalid NFTs.",
        "params": {
          "_index": "A counter less than `balanceOf(_owner)`",
          "_owner": "An address where we are interested in NFTs owned by them"
        },
        "returns": {
          "_0": "The token identifier for the `_index`th NFT assigned to `_owner`,   (sort order not specified)"
        }
      },
      "tokenURI(uint256)": {
        "details": "Returns token URI if it was previously set with `setTokenURI`,      otherwise constructs it as base URI + token ID"
      },
      "totalSupply()": {
        "returns": {
          "_0": "A count of valid NFTs tracked by this contract, where each one of  them has an assigned and queryable owner not equal to the zero address"
        }
      },
      "transferFrom(address,address,uint256)": {
        "details": "Throws unless `msg.sender` is the current owner, an authorized  operator, or the approved address for this NFT. Throws if `_from` is  not the current owner. Throws if `_to` is the zero address. Throws if  `_tokenId` is not a valid NFT.",
        "params": {
          "_from": "The current owner of the NFT",
          "_to": "The new owner",
          "_tokenId": "The NFT to transfer"
        }
      },
      "updateFeatures(uint256)": {
        "details": "Requires transaction sender to have `ROLE_ACCESS_MANAGER` permissionFunction is left for backward compatibility with older versions",
        "params": {
          "_mask": "bitmask representing a set of features to enable/disable"
        }
      },
      "updateRole(address,uint256)": {
        "details": "Setting role to zero is equivalent to removing an all permissionsSetting role to `FULL_PRIVILEGES_MASK` is equivalent to      copying senders' permissions (role) to the userRequires transaction sender to have `ROLE_ACCESS_MANAGER` permission",
        "params": {
          "operator": "address of a user to alter permissions for,       or self address to alter global features of the smart contract",
          "role": "bitmask representing a set of permissions to      enable/disable for a user specified"
        }
      }
    },
    "stateVariables": {
      "BATCH_SIZE_MULTIPLIER": {
        "details": "32 bit token ID space is optimal for batch minting in batches of size 8      8 * 32 = 256 - single storage slot in global/local collection(s)"
      },
      "DOMAIN_TYPEHASH": {
        "details": "Note: we do not include version into the domain typehash/separator,      it is implied version is concatenated to the name field, like \"TinyERC721v1\""
      },
      "FEATURE_BURNS_ON_BEHALF": {
        "details": "Feature FEATURE_BURNS_ON_BEHALF must be enabled in order for      `burn()` function to succeed when called by approved operator"
      },
      "FEATURE_OPERATOR_PERMITS": {
        "details": "Feature FEATURE_OPERATOR_PERMITS must be enabled in order for      `permitForAll()` function to succeed"
      },
      "FEATURE_OWN_BURNS": {
        "details": "Feature FEATURE_OWN_BURNS must be enabled in order for      `burn()` function to succeed when called by token owner"
      },
      "FEATURE_PERMITS": {
        "details": "Feature FEATURE_PERMITS must be enabled in order for      `permit()` function to succeed"
      },
      "FEATURE_TRANSFERS": {
        "details": "Feature FEATURE_TRANSFERS must be enabled in order for      `transferFrom()` function to succeed when executed by token owner"
      },
      "FEATURE_TRANSFERS_ON_BEHALF": {
        "details": "Feature FEATURE_TRANSFERS_ON_BEHALF must be enabled in order for      `transferFrom()` function to succeed whe executed by approved operatorToken owner must call `approve()` or `setApprovalForAll()`      first to authorize the transfer on behalf"
      },
      "ROLE_TOKEN_CREATOR": {
        "details": "Role ROLE_TOKEN_CREATOR allows minting tokens      (calling `mint` function)"
      },
      "ROLE_TOKEN_DESTROYER": {
        "details": "Role ROLE_TOKEN_DESTROYER allows burning tokens      (calling `burn` function)"
      },
      "ROLE_URI_MANAGER": {
        "details": "Role ROLE_URI_MANAGER allows updating the base URI      (executing `setBaseURI` function)"
      },
      "_tokenURIs": {
        "details": "Optional mapping for token URIs to be returned as is when `tokenURI()`      is called; if mapping doesn't exist for token, the URI is constructed      as `base URI + token ID`, where plus (+) denotes string concatenation"
      },
      "allTokens": {
        "details": "We call this collection \"Global\" token collectionArray with all Token IDs, used for enumerationTotal token supply `tokenSupply` is the length of this collection:      `totalSupply() = allTokens.length`"
      },
      "approvals": {
        "details": "`Maps Token ID => Approved Address`, where      Approved Address is an address allowed transfer ownership for the token      defined by Token ID"
      },
      "approvedOperators": {
        "details": "Maps `Token Owner Address => Operator Address => Approval State` - true/false (approved/not), where      - Token Owner Address is any address which may own tokens or not,      - Operator Address is any other address which may own tokens or not,      - Approval State is a flag indicating if Operator Address is allowed to        transfer tokens owned by Token Owner Address o their behalf"
      },
      "baseURI": {
        "details": "Base URI is used to construct ERC721Metadata.tokenURI as      `base URI + token ID` if token URI is not set (not present in `_tokenURIs` mapping)For example, if base URI is https://api.com/token/, then token #1      will have an URI https://api.com/token/1If token URI is set with `setTokenURI()` it will be returned as is via `tokenURI()`"
      },
      "collections": {
        "details": "We call these collections \"Local\" token collectionsMaps `Token Owner Address => Owned Token IDs Array`Token owner balance is the length of their token collection:      `balanceOf(owner) = collections[owner].length`"
      },
      "decimals": {
        "details": "ERC20 compliant token decimals is equal to zero since ERC721 token is non-fungible      and therefore non-divisible"
      },
      "permitNonces": {
        "details": "A record of nonces for signing/validating signatures in EIP-712 based      `permit` and `permitForAll` functionsEach time the nonce is used, it is increased by one, meaning reordering      of the EIP-712 transactions is not possibleInspired by EIP-2612 extension for ERC20 token standardMaps token owner address => token owner nonce"
      },
      "tokens": {
        "details": "Maps `Token ID => Token ID Global Index | Token ID Local Index | Token Owner Address`, where      - Token ID Global Index denotes Token ID index in the array of all the tokens,      - Token ID Local Index denotes Token ID index in the array of all the tokens owned by the owner,      - Token ID indexes are 32 bits long,      - `|` denotes bitwise concatenation of the valuesToken Owner Address for a given Token ID is lower 160 bits of the mapping value"
      }
    },
    "title": "Tiny ERC721, a.k.a 32bit NFT",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "DOMAIN_SEPARATOR()": {
        "notice": "EIP-712 contract's domain separator,      see https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator      note: we specify contract version in its name"
      },
      "DOMAIN_TYPEHASH()": {
        "notice": "EIP-712 contract's domain typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "FEATURE_BURNS_ON_BEHALF()": {
        "notice": "Enables approved operators to burn tokens on behalf of their owners"
      },
      "FEATURE_OPERATOR_PERMITS()": {
        "notice": "Enables operator approvals on behalf (permits for all via an EIP712 signature)"
      },
      "FEATURE_OWN_BURNS()": {
        "notice": "Enables token owners to burn their own tokens"
      },
      "FEATURE_PERMITS()": {
        "notice": "Enables approvals on behalf (permits via an EIP712 signature)"
      },
      "FEATURE_TRANSFERS()": {
        "notice": "Enables ERC721 transfers of the tokens      (transfer by the token owner himself)"
      },
      "FEATURE_TRANSFERS_ON_BEHALF()": {
        "notice": "Enables ERC721 transfers on behalf      (transfer by someone else on behalf of token owner)"
      },
      "PERMIT_FOR_ALL_TYPEHASH()": {
        "notice": "EIP-712 permitForAll (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "PERMIT_TYPEHASH()": {
        "notice": "EIP-712 permit (EIP-2612) struct typeHash,      see https://eips.ethereum.org/EIPS/eip-712#rationale-for-typehash"
      },
      "ROLE_ACCESS_MANAGER()": {
        "notice": "Access manager is responsible for assigning the roles to users,      enabling/disabling global features of the smart contractAccess manager can add, remove and update user roles,      remove and update global features"
      },
      "ROLE_TOKEN_CREATOR()": {
        "notice": "Token creator is responsible for creating (minting)      tokens to an arbitrary address"
      },
      "ROLE_TOKEN_DESTROYER()": {
        "notice": "Token destroyer is responsible for destroying (burning)      tokens owned by an arbitrary address"
      },
      "ROLE_UPGRADE_MANAGER()": {
        "notice": "Upgrade manager is responsible for smart contract upgrades,      see https://docs.openzeppelin.com/contracts/4.x/api/proxy#UUPSUpgradeable      see https://docs.openzeppelin.com/contracts/4.x/upgradeable"
      },
      "ROLE_URI_MANAGER()": {
        "notice": "URI manager is responsible for managing base URI      part of the token URI ERC721Metadata interface"
      },
      "approve(address,uint256)": {
        "notice": "Change or reaffirm the approved address for an NFT"
      },
      "balanceOf(address)": {
        "notice": "Count all NFTs assigned to an owner"
      },
      "decimals()": {
        "notice": "Current implementation includes a function `decimals` that returns uint8(0)      to be more compatible with ERC-20"
      },
      "exists(uint256)": {
        "notice": "Checks if specified token exists"
      },
      "features()": {
        "notice": "Retrieves globally set of features enabled"
      },
      "getApproved(uint256)": {
        "notice": "Get the approved address for a single NFT"
      },
      "getRole(address)": {
        "notice": "Reads the permissions (role) for a given user from the `userRoles` mapping      (privileged addresses with defined roles/permissions)In the context of ERC20/ERC721 tokens these can be permissions to      allow minting or burning tokens, transferring on behalf and so on"
      },
      "isApprovedForAll(address,address)": {
        "notice": "Query if an address is an authorized operator for another address"
      },
      "isFeatureEnabled(uint256)": {
        "notice": "Checks if requested set of features is enabled globally on the contract"
      },
      "isOperatorInRole(address,uint256)": {
        "notice": "Checks if operator has all the permissions (role) required"
      },
      "isSenderInRole(uint256)": {
        "notice": "Checks if transaction sender `msg.sender` has all the permissions required"
      },
      "name()": {
        "notice": "ERC-20 compatible descriptive name for a collection of NFTs in this contract"
      },
      "ownerOf(uint256)": {
        "notice": "Find the owner of an NFT"
      },
      "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Change or reaffirm the approved address for an NFT on behalf"
      },
      "permitForAll(address,address,bool,uint256,uint8,bytes32,bytes32)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage      all of owner's assets - on behalf"
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfers the ownership of an NFT from one address to another address"
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfers the ownership of an NFT from one address to another address"
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Enable or disable approval for a third party (\"operator\") to manage  all of `msg.sender`'s assets"
      },
      "supportsInterface(bytes4)": {
        "notice": "Query if a contract implements an interface"
      },
      "symbol()": {
        "notice": "ERC-20 compatible abbreviated name for a collection of NFTs in this contract"
      },
      "tokenByIndex(uint256)": {
        "notice": "Enumerate valid NFTs"
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "notice": "Enumerate NFTs assigned to an owner"
      },
      "tokenURI(uint256)": {
        "notice": "A distinct Uniform Resource Identifier (URI) for a given asset."
      },
      "totalSupply()": {
        "notice": "Count NFTs tracked by this contract"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer ownership of an NFT -- THE CALLER IS RESPONSIBLE  TO CONFIRM THAT `_to` IS CAPABLE OF RECEIVING NFTS OR ELSE  THEY MAY BE PERMANENTLY LOST"
      },
      "updateFeatures(uint256)": {
        "notice": "Updates set of the globally enabled features (`features`),      taking into account sender's permissions"
      },
      "updateRole(address,uint256)": {
        "notice": "Updates set of permissions (role) for a given user,      taking into account sender's permissions."
      }
    },
    "notice": "Tiny ERC721 defines an NFT with an integer (up to 32 bits) ID space.Rationale      Problem: ERC721 enumeration support requires some additional writes to the storage:      - when transferring a token in order to update the NFT collections of        the previous and next owners,      - when minting/burning a token in order to update global NFT collection      Solution: Reducing NFT ID space to 32 bits allows      - to eliminate the need to have and to write to two additional storage mappings        (also achievable with the 48 bits ID space)      - when batch minting, an optimization of writing 8 tokens at once into        global/local collections appliesThis smart contract can be used as is, but also can be inherited and used as a template.Fully ERC721-compatible with all optional interfaces implemented (metadata, enumeration),      see https://eips.ethereum.org/EIPS/eip-721",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 303,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 306,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "userRoles",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 15,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1479,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "name",
        "offset": 0,
        "slot": "51",
        "type": "t_string_storage"
      },
      {
        "astId": 1483,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "symbol",
        "offset": 0,
        "slot": "52",
        "type": "t_string_storage"
      },
      {
        "astId": 1492,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "tokens",
        "offset": 0,
        "slot": "53",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1498,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "collections",
        "offset": 0,
        "slot": "54",
        "type": "t_mapping(t_address,t_array(t_uint32)dyn_storage)"
      },
      {
        "astId": 1502,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "allTokens",
        "offset": 0,
        "slot": "55",
        "type": "t_array(t_uint32)dyn_storage"
      },
      {
        "astId": 1507,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "approvals",
        "offset": 0,
        "slot": "56",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 1514,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "approvedOperators",
        "offset": 0,
        "slot": "57",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1519,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "permitNonces",
        "offset": 0,
        "slot": "58",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1524,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "baseURI",
        "offset": 0,
        "slot": "59",
        "type": "t_string_storage"
      },
      {
        "astId": 1529,
        "contract": "contracts/token/TinyERC721.sol:TinyERC721",
        "label": "_tokenURIs",
        "offset": 0,
        "slot": "60",
        "type": "t_mapping(t_uint256,t_string_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint32)dyn_storage": {
        "base": "t_uint32",
        "encoding": "dynamic_array",
        "label": "uint32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_uint32)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint32[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint32)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}